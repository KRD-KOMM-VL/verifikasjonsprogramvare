/**
 * Zero-Knowledge Protocols for E-Vote (ZKPEV).
 *
 * Copyright Â© 2013, The Norwegian Ministry of Local Government and Regional
 * Development (KRD).
 *
 * This file is part of ZKPEV.
 *
 * ZKPEV is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZKPEV is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You can find a copy of the GNU General Public License in
 * /src/site/resources/gpl-3.0-standalone.html. Otherwise, see also
 * http://www.gnu.org/licenses/.
 */
package com.computas.zkpev2013.decryption;

import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;

import static com.computas.zkpev2013.ZkpFunctionalTestAssertions.assertZkpContainsIncident;
import static com.computas.zkpev2013.ZkpFunctionalTestAssertions.assertZkpDoesNotContainIncident;

/**
 * Functional tests against the NizkpDecryption class.
 */
public class NizkpDecryptionFunctionalTest {
    private static final String DECRYPTION_FILE_NAME = "NizkpDecryption2013FunctionalTestDecryptionFile.csv";
    private static final String ELGAMAL_PROPERTIES_FILE_NAME = "NizkpDecryption2013FunctionalTestElGamalProperties.properties";
    private static final String ELGAMAL_PUBLIC_KEYS_FILE_NAME = "NizkpDecryption2013FunctionalTestElGamalPublicKeys.properties";
    private static final String DECRYPTION_LINE_WITH_CORRECT_PROOF = "130001,01,000003,JEAoUFSd3pQofu2Cg8o5Y+bM+CYXQpXPjjHEOThZ3ihDycv1mkz81ocQ6qtF8+v7#n#SBRD5fGHA1s6lCNofWOiBDbYIQn67UBUX+0FGQRaU13C/9v+Tuj2IvlCEYD5p4PT#n#5xqkdpLkkjW1ee3MMdsSeIXTV4rji2U2Lt2cqHOEC5n4RdxvoJnA1OCkjKMfbXeE#n#PhsHsKuYjRLZGeyTnXQnctvN/R1ci9HfpnTTVpCX2Gkh9Vc6/Ozh3ro9Uc5aN7et#n#SHYUkR0k9sFmDtv8ZKKTTk8EmJAgkp/CLOz8bISjfqQbxZMS6zDDgtgLpEtFanph#n#e345BxprSyK4qgDOP7vT2g==#AJFaR0b9KMEBRwXfUPnFTFWgj/HY+N1pmvAzSnVrw+MRFZISdj5lsL6l3a5Q9AE3#n#+3UfKwBOcfTnmfASeLnQ++etRUTLqVQVnc8JzMP1Lz4S4nc8Oyy3cAGp2FaorESG#n#KerX7vzEVcc6ZySm6Ec/pjAgI1adfov+xP/8CTbMSC2Qbfbgd5blb5pGGPuJr2EZ#n#rONV6SA0sq9DrEMGLsFAMNKIJU0Jhg+4vNhbchasuu0gpXXGN0JKxpzNC/ZzkVup#n#dkl6zkrsPlGG4bs9ApPwkp+w+xB7AjxLtSalWUtFGKtC94rYWglB8i8BaadhpWEN#n#X5wL4Vvn2bcRXXvrNhuE8aY=#deJF0PHQIJtkoDhZRngzv2Bjj94nr7AL/exTPE5gl6AJKxh1MiorcvxdIdwxLxAF#n#8Fsfdj1wHZdQ1dSNOxzrXAj6QyiZjPpl2Jr7+6gqAdEyoKCk7rvHFMVPYbTkw7ir#n#aA9dx+BfdHGSzZJFIRMM66f0fvU/OyYRyhSbXkEkWZvL/NXxTPmaASTypoUvH182#n#JQbQLQoWYRZnztzqUaHIoSyV04BYZ5SWAtD9smETmj2A9BGPpuJgdwRudsDiRI/4#n#w+vmkt5qt5K9ehmn29r4ecQnPywaHzD7IKmJNc+iIa17L4iHBqFeCiSkoiHHzivt#n#pKTl1B4KWzE9Ud+sUJLRKw==#,107374846025726463011364041934#1597148908135408365142193,MjI1MTk3ODE4NjAzMTg4ODE0MzAxODcyMzczNzgzOTM5MTA0NDA0MzM0NTY3OTMxMDY4ODM0MzkxOTE1NTQwNDU2MDk1MzMxOTAyMDQ3MTYwMjYwOTQ1MDM0ODgwNTEwNDM1MzEyNTc2OTUyMzIxMDAzNTM5OTQyOTY0MzE5OTk3MzMzMDU5MTMyODk4MzA2MDY2MjM2NzUwOTQ4MDY4Nzc4ODQyNTU4NzI0Mzk3MTQ2Nzg5MTQ5OTIwNTYxNjkzNTM2OTIwMzYwMjE3NzAwOTcyMjM3NzgzOTIxMDUyNjIzMDc4MDMxMDQ5NTExNzE0MjkxNTA5ODI3NjcwNjk3MDA2NTM5MDkxOTU2NDc1OTkwOTg3ODAwNDY3MjQ3MDM3ODU5OTE3NTUyNTkwOTU5MTI3ODY1MDg4NDUyMjI1OTc3NzI4ODcyMDM1NDY2MzI0OTM5MzU1OTA4MDkzMjYzMjk4MjI4Mzc2ODIzNjE1MTE0MzkwNTQ0NTgxNjU0NjcwNDQ0OTA2NTg2Njg5MDg3NTU1MTY2MTEwNzU4NTI1OTEzNDA5MTM3MzEzMjQyODI1MzE0MTEzMDE1Mjc0NTM3NTY3OTEwNTcxMDc5MjkxNzI4MzkwMDM3NDM0ODUwMTIzMTMwMDA0MDM1MzQzMzA5MjI0MTY1NDA4Mjg4NzQ3ODMzMzg2NTA2NjIwMDc0MzYwNTk0NDEzNDgxNTA3NTg1OTE1NTU1NzM2OTIyNTY0MDMzNzgyOTQ4NzU0ODU2ODA2NzQwMDIxMTI2NDYzOTQ5OTgzMDA3ODkyMTExNzg3NjAxMDY2NzQyNzV8LTUwNDkyMzM2OTAyNzk0NzY1NzMxMTI4OTY5MjkzNjc4OTg4MjE3NDIwMjAxMjM1MjA1NTYzNjYxNDc5ODUwNjI5NzU4NDEyODEyMjM3NjgxNTA3NDc5NDc0NTE2ODA4ODQyMzcyMTA3Njk0NjgxMDU3ODkwNDA5OTMzOTIwMjk5ODQ3MjE1MDY4MTc0MzE3NTM1MjY3MDkyMzI3Mzk3NzA0MDc4OTc4MDg5NjE0NjM2NzExNTE0NDk0MDI2ODI4NTYwNzcxMTQ1NjQ3Nzk4MTI2Mjc1MTY0MDg5Mzk1Njk4MjA5ODM4NzY5MTYxMjg0NjU2MjE2Mzg5MDk5OTEyMzc1NDAxOTIwMTY3NzU4OTI0NjU0MzQwOTM0OTA0ODg2NTc3MjU4MzAwMDc0ODQxNjQ4MTE0NDUxNjM1NTIxMjc0OTA5MTgwNjIyMDkxNzI0NTE1NDAwNjcwMTQ5MDE2NTA0NTM2NzMwOTY3NzAwMTQ3NTQyMTM1OTc1NDQxNzYwNjYwNjgwMDI0MjUyNTM0MjY3ODMxMDM1MDI0MzAzOTA0ODU5MDI3MDY4MTQzMzg5NDY3MzY2NTkwNjc4MDc5OTQ1NTQ4MTQ5MTYxNDY2NTc2MjQxMjcyNzA5MTkyNzg5NjM5NTA5NDY3Mzk4MDU5OTI3NTI4MzM5NjQ5NjE3Njg4NTM3NDEyMzM4NTI4NjI5MTgwMzUwMDAyOTYzNDIyMjQ5NjA4NDAzOTE4MDc1ODM4OTExNjAyNzI2MTAyOTkzOTQ4ODc5NDEzMjkxMzk0MTA3MzE1NTcxNDkwNjUxMDk3NjI0MjAwOTM3NDExNTczMDMxNDYxNDgzMjE1NTI1NzUxNTk3MjExMDg0MTg2OTI4NDMyMDc3NTI4NjUzMzY4MjIxMjU1MTc4Nzk0NzUzMDk3NzI1NTIyOTM5NjI2MTg2OTkwNDQwOTk4MDQ1MjU4Nzk0MjMxOTc0NjYwMjg4MTg2NzI2MTM5NjA2OTA1NTU5NTA3Nzc5NzM5Mzg4MDg5MDAxMTE0NzQ3NjQzMTI3MDY1NTg2Nzg1MDkyNDIwNTk4Njg1NzQ1ODA2NTc1MjIzODA1NDU2NjQxMzYwMDA4OTQxNDEwMjY1NDczNTIzOTg0NDUwMDMxMjQzMTA3ODc1MTk3MjI2NDMxMzkyMDk2NDQwNTk2NDUyNzI1MzI3NjYyNTY5Njk3NzQwOTA3MTAyNTUzODUxNDMwMjgzODc1MzE0MjAwMDI1ODMxNjMwNzI0MTIzMjY1MTU0Njk0OTk4OTM2NDkyMTUzMDgxMzIyOTcwMDU2ODk1MjkzODQ5OTQ5MTkyMjc4NDgxMjk3OTE2NTk4MTI0Mjk1NjczMjU3ODQ2NzQyODQ1MjI4OTQ4MTI3NDY4NzM3NjMwMDQzNzE1MjYzNTA0OTYwOTg1OTQyMzM2MjkzNzAwNzU1Mjg5OTQ5ODkwNTIwNjg0NTcyNTY5OTc4NjE5NjkzNTAyMTgyODc0MDQ3MDk4NjIxNDQ0MzQ4MTU5NDA1NjY3MTI5MDcwNjA3NjcxNTMzNTUyNjg5MDM1NTgzNjUyODU1Nzc5NDk1NTgxNDk1MTgxNTE0MTI3MDYxNzIxMjkxNTgxNDEwNDQ0MDEyODYxMjc3MzcwMDQxMHxudWxs";
    private static final String DECRYPTION_LINE_WITH_INCORRECT_PROOF = "130001,01,000003,jJEAoUFSd3pQofu2Cg8o5Y+bM+CYXQpXPjjHEOThZ3ihDycv1mkz81ocQ6qtF8+v7#n#SBRD5fGHA1s6lCNofWOiBDbYIQn67UBUX+0FGQRaU13C/9v+Tuj2IvlCEYD5p4PT#n#5xqkdpLkkjW1ee3MMdsSeIXTV4rji2U2Lt2cqHOEC5n4RdxvoJnA1OCkjKMfbXeE#n#PhsHsKuYjRLZGeyTnXQnctvN/R1ci9HfpnTTVpCX2Gkh9Vc6/Ozh3ro9Uc5aN7et#n#SHYUkR0k9sFmDtv8ZKKTTk8EmJAgkp/CLOz8bISjfqQbxZMS6zDDgtgLpEtFanph#n#e345BxprSyK4qgDOP7vT2g==#AJFaR0b9KMEBRwXfUPnFTFWgj/HY+N1pmvAzSnVrw+MRFZISdj5lsL6l3a5Q9AE3#n#+3UfKwBOcfTnmfASeLnQ++etRUTLqVQVnc8JzMP1Lz4S4nc8Oyy3cAGp2FaorESG#n#KerX7vzEVcc6ZySm6Ec/pjAgI1adfov+xP/8CTbMSC2Qbfbgd5blb5pGGPuJr2EZ#n#rONV6SA0sq9DrEMGLsFAMNKIJU0Jhg+4vNhbchasuu0gpXXGN0JKxpzNC/ZzkVup#n#dkl6zkrsPlGG4bs9ApPwkp+w+xB7AjxLtSalWUtFGKtC94rYWglB8i8BaadhpWEN#n#X5wL4Vvn2bcRXXvrNhuE8aY=#deJF0PHQIJtkoDhZRngzv2Bjj94nr7AL/exTPE5gl6AJKxh1MiorcvxdIdwxLxAF#n#8Fsfdj1wHZdQ1dSNOxzrXAj6QyiZjPpl2Jr7+6gqAdEyoKCk7rvHFMVPYbTkw7ir#n#aA9dx+BfdHGSzZJFIRMM66f0fvU/OyYRyhSbXkEkWZvL/NXxTPmaASTypoUvH182#n#JQbQLQoWYRZnztzqUaHIoSyV04BYZ5SWAtD9smETmj2A9BGPpuJgdwRudsDiRI/4#n#w+vmkt5qt5K9ehmn29r4ecQnPywaHzD7IKmJNc+iIa17L4iHBqFeCiSkoiHHzivt#n#pKTl1B4KWzE9Ud+sUJLRKw==#,107374846025726463011364041934#1597148908135408365142193,MjI1MTk3ODE4NjAzMTg4ODE0MzAxODcyMzczNzgzOTM5MTA0NDA0MzM0NTY3OTMxMDY4ODM0MzkxOTE1NTQwNDU2MDk1MzMxOTAyMDQ3MTYwMjYwOTQ1MDM0ODgwNTEwNDM1MzEyNTc2OTUyMzIxMDAzNTM5OTQyOTY0MzE5OTk3MzMzMDU5MTMyODk4MzA2MDY2MjM2NzUwOTQ4MDY4Nzc4ODQyNTU4NzI0Mzk3MTQ2Nzg5MTQ5OTIwNTYxNjkzNTM2OTIwMzYwMjE3NzAwOTcyMjM3NzgzOTIxMDUyNjIzMDc4MDMxMDQ5NTExNzE0MjkxNTA5ODI3NjcwNjk3MDA2NTM5MDkxOTU2NDc1OTkwOTg3ODAwNDY3MjQ3MDM3ODU5OTE3NTUyNTkwOTU5MTI3ODY1MDg4NDUyMjI1OTc3NzI4ODcyMDM1NDY2MzI0OTM5MzU1OTA4MDkzMjYzMjk4MjI4Mzc2ODIzNjE1MTE0MzkwNTQ0NTgxNjU0NjcwNDQ0OTA2NTg2Njg5MDg3NTU1MTY2MTEwNzU4NTI1OTEzNDA5MTM3MzEzMjQyODI1MzE0MTEzMDE1Mjc0NTM3NTY3OTEwNTcxMDc5MjkxNzI4MzkwMDM3NDM0ODUwMTIzMTMwMDA0MDM1MzQzMzA5MjI0MTY1NDA4Mjg4NzQ3ODMzMzg2NTA2NjIwMDc0MzYwNTk0NDEzNDgxNTA3NTg1OTE1NTU1NzM2OTIyNTY0MDMzNzgyOTQ4NzU0ODU2ODA2NzQwMDIxMTI2NDYzOTQ5OTgzMDA3ODkyMTExNzg3NjAxMDY2NzQyNzV8LTUwNDkyMzM2OTAyNzk0NzY1NzMxMTI4OTY5MjkzNjc4OTg4MjE3NDIwMjAxMjM1MjA1NTYzNjYxNDc5ODUwNjI5NzU4NDEyODEyMjM3NjgxNTA3NDc5NDc0NTE2ODA4ODQyMzcyMTA3Njk0NjgxMDU3ODkwNDA5OTMzOTIwMjk5ODQ3MjE1MDY4MTc0MzE3NTM1MjY3MDkyMzI3Mzk3NzA0MDc4OTc4MDg5NjE0NjM2NzExNTE0NDk0MDI2ODI4NTYwNzcxMTQ1NjQ3Nzk4MTI2Mjc1MTY0MDg5Mzk1Njk4MjA5ODM4NzY5MTYxMjg0NjU2MjE2Mzg5MDk5OTEyMzc1NDAxOTIwMTY3NzU4OTI0NjU0MzQwOTM0OTA0ODg2NTc3MjU4MzAwMDc0ODQxNjQ4MTE0NDUxNjM1NTIxMjc0OTA5MTgwNjIyMDkxNzI0NTE1NDAwNjcwMTQ5MDE2NTA0NTM2NzMwOTY3NzAwMTQ3NTQyMTM1OTc1NDQxNzYwNjYwNjgwMDI0MjUyNTM0MjY3ODMxMDM1MDI0MzAzOTA0ODU5MDI3MDY4MTQzMzg5NDY3MzY2NTkwNjc4MDc5OTQ1NTQ4MTQ5MTYxNDY2NTc2MjQxMjcyNzA5MTkyNzg5NjM5NTA5NDY3Mzk4MDU5OTI3NTI4MzM5NjQ5NjE3Njg4NTM3NDEyMzM4NTI4NjI5MTgwMzUwMDAyOTYzNDIyMjQ5NjA4NDAzOTE4MDc1ODM4OTExNjAyNzI2MTAyOTkzOTQ4ODc5NDEzMjkxMzk0MTA3MzE1NTcxNDkwNjUxMDk3NjI0MjAwOTM3NDExNTczMDMxNDYxNDgzMjE1NTI1NzUxNTk3MjExMDg0MTg2OTI4NDMyMDc3NTI4NjUzMzY4MjIxMjU1MTc4Nzk0NzUzMDk3NzI1NTIyOTM5NjI2MTg2OTkwNDQwOTk4MDQ1MjU4Nzk0MjMxOTc0NjYwMjg4MTg2NzI2MTM5NjA2OTA1NTU5NTA3Nzc5NzM5Mzg4MDg5MDAxMTE0NzQ3NjQzMTI3MDY1NTg2Nzg1MDkyNDIwNTk4Njg1NzQ1ODA2NTc1MjIzODA1NDU2NjQxMzYwMDA4OTQxNDEwMjY1NDczNTIzOTg0NDUwMDMxMjQzMTA3ODc1MTk3MjI2NDMxMzkyMDk2NDQwNTk2NDUyNzI1MzI3NjYyNTY5Njk3NzQwOTA3MTAyNTUzODUxNDMwMjgzODc1MzE0MjAwMDI1ODMxNjMwNzI0MTIzMjY1MTU0Njk0OTk4OTM2NDkyMTUzMDgxMzIyOTcwMDU2ODk1MjkzODQ5OTQ5MTkyMjc4NDgxMjk3OTE2NTk4MTI0Mjk1NjczMjU3ODQ2NzQyODQ1MjI4OTQ4MTI3NDY4NzM3NjMwMDQzNzE1MjYzNTA0OTYwOTg1OTQyMzM2MjkzNzAwNzU1Mjg5OTQ5ODkwNTIwNjg0NTcyNTY5OTc4NjE5NjkzNTAyMTgyODc0MDQ3MDk4NjIxNDQ0MzQ4MTU5NDA1NjY3MTI5MDcwNjA3NjcxNTMzNTUyNjg5MDM1NTgzNjUyODU1Nzc5NDk1NTgxNDk1MTgxNTE0MTI3MDYxNzIxMjkxNTgxNDEwNDQ0MDEyODYxMjc3MzcwMDQxMHxudWxs";
    private static final String BROKEN_DECRYPTION_LINE = "*";
    private NizkpDecryption nizkp;

    /**
     * Creates a NizkpCounting object, loads the files with the ElGamal properties,
     * the ElGamal public key and the decryption file, and runs the protocol.
     * @throws java.io.IOException Thrown if something goes wrong during IO.
     * @throws java.security.NoSuchAlgorithmException Should not be thrown.
     */
    @BeforeMethod
    public void createNizkpLoadDataFilesAndRun()
        throws IOException, NoSuchAlgorithmException {
        nizkp = new NizkpDecryption(new String[] {
                    ELGAMAL_PROPERTIES_FILE_NAME, ELGAMAL_PUBLIC_KEYS_FILE_NAME,
                    DECRYPTION_FILE_NAME
                });
        nizkp.run();
    }

    /**
     * Verifies that the NIZKP produced an incident about the broken line
     * in the decryption file.
     */
    @Test
    public void resultsMustContainBrokenLineIncident() {
        assertZkpContainsIncident(nizkp,
            new DecryptionFileBrokenLineIncident(BROKEN_DECRYPTION_LINE));
    }

    /**
     * Verifies that the NIZKP produced an incident for the line that contained
     * an incorrect proof.
     */
    @Test
    public void resultsMustContainIncorrectProofIncident() {
        assertZkpContainsIncident(nizkp,
            new DecryptionLineWithIncorrectProofIncident(
                new DecryptionLine(DECRYPTION_LINE_WITH_INCORRECT_PROOF,
                    "verificatum")));
    }

    /**
     * Verifies that the NIZKP didn't produce an incident for the line that
     * contained a correct proof.
     */
    @Test
    public void resultsMustNotContainIncidentAboutCorrectProof() {
        assertZkpDoesNotContainIncident(nizkp,
            new DecryptionLineWithIncorrectProofIncident(
                new DecryptionLine(DECRYPTION_LINE_WITH_CORRECT_PROOF,
                    "default")));
    }
}
