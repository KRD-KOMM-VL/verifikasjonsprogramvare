/**
 * Zero-Knowledge Protocols for E-Vote (ZKPEV).
 *
 * Copyright Â© 2013, The Norwegian Ministry of Local Government and Regional
 * Development (KRD).
 *
 * This file is part of ZKPEV.
 *
 * ZKPEV is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZKPEV is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You can find a copy of the GNU General Public License in
 * /src/site/resources/gpl-3.0-standalone.html. Otherwise, see also
 * http://www.gnu.org/licenses/.
 */
package com.computas.zkpev2013.mixing;

import com.computas.zkpev2013.ElGamalPublicKeyList;
import com.computas.zkpev2013.ResultsArrayList;
import com.computas.zkpev2013.ResultsList;

import com.scytl.evote.protocol.integration.mixing.base.VoteGroupAffiliations;
import com.scytl.evote.protocol.signers.SchnorrSignature;

import org.apache.commons.codec.binary.Base64;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.io.IOException;

import java.math.BigInteger;

import java.security.NoSuchAlgorithmException;

/**
 * Unit tests on MixingVerificationWorker.
 *
 */
public class MixingVerificationWorkerUnitTest {
    private static final int THREE = 3;
    private static final BigInteger SAMPLE_P = new BigInteger(
            "22519781860318881430187237378393910440433456793106883439191554045609533190204716026094503488051043531257695232100353994296431999733305913289830606623675094806877884255872439714678914992056169353692036021770097223778392105262307803104951171429150982767069700653909195647599098780046724703785991755259095912786508845222597772887203546632493935590809326329822837682361511439054458165467044490658668908755516611075852591340913731324282531411301527453756791057107929172839003743485012313000403534330922416540828874783338650662007436059441348150784982317988527563812882812455109992843656727186872083932493433216403334110087");
    private static final ElGamalVoteGroupFactors SAMPLE_EL_GAMAL_INPUT_VOTE_GROUP_FACTORS =
        new ElGamalVoteGroupFactors(SAMPLE_P,
            new BigInteger("10449338465223365401855898777430994850975134209443443420563090777591754084392653054879066360089280221513629145812688507972323755816545397121031875017693479709193734715191330924564534471394811784591987669999663451908225372253832379941291988941492869355945732754063161882123559943702550578804461256205734360217022435190731116674596012300946450610556897549703539743585123630870087402322263651191416269422741197839987953002512949635238259604231936963556073460138101960435803360006138511814785715071739078507328507434954992425470544154933676020432566177858472881299319540106031157990374643584094602321568752746930021868587"),
            new BigInteger("674022269368327096519469785856030923273776778692160758312942818453888708967119425297619883844649798446079403053714055820876678166982693432196082990286847829552212255839527145899285592814513336015002928869237303665205309015822967698893086588223008245831154900041589085092267007557792129466662977357784087933657175707628016237729681865345412871745986139139691340007709369070599636063405487655314708251672843305436481447495840233591780444234723315591582295716366600489781838761750546027420332754138612156030007413131937614333605079230223652520573779206005864933328286895311119921626872505693170377128244833780031866504"));
    private static final ElGamalVoteGroupFactors SAMPLE_EL_GAMAL_OUTPUT_VOTE_GROUP_FACTORS =
        new ElGamalVoteGroupFactors(SAMPLE_P,
            new BigInteger("4711326788819759413726219615300782887451494104427352372162670613542161442627725991488635955411591032874218726855572937010500277243036189268976991388871920682847178376410615215666766604739764865959702337971670772732757244393844892809627594522949373616680719387494809559159863841551402139274924031931549807789137137813530827169730449233638399228424947213669530771735063447114047806483792028855324097257470010238566871969325284144192343559132786922023531596424360830357833699549390280571972716224735694123674574767729747229595596894545257894963902998354161209780406958291255319378480697252836572307762040094019342709516"),
            new BigInteger("8396147954538926341826685987387505338035672898952603597218480042101379374317361721847340891267663902976657247876165566986448587969756100347148607165390628325114736731825453181633646034287118077984220417332125541759232510721101709819897055918746297765812866694852232421396596534418343071508775456742030308689186563214254019521328121620259208677189117638452910646654781786071280653446730926536835169533001916258323662142869016581505152644603970433861084265443966289749759595227281525668580323773378210759072050070036494858730606127142443918359748080335673945353979767416555955255308331342717220874408904099548915337330"));
    private static final BigInteger SAMPLE_G = new BigInteger(
            "19140805144017540497707786625792286921405966026933054372546212478081606825277100641152753685549997641757412202354820556035283634167831414111680419792323513134593333242130321485704646466132023972092638166348661889738666905149514346301514811888481584122903522192426522565163431677342704016489172931295206771271956675417455593733493182654653217734161457736905965163738973158663182502896276372310802897020170186481607829975539047679142654262779602075975560918037248175928164089234991713304225443874682021320096580809741466636539107495416015820825091232630444699803381650489285110532680106190202164342326569938521995903077");
    private static final BigInteger SAMPLE_H = new BigInteger(
            "2845900343850740866374531020573760027178815994101255199271451349085635929451247274902354785747435050464311957611656651026683594526872647380194792603580549719252743769454973801102535753003597235936230400142728333461078450756801723446561177583580224721305069481719011022212097965166593338323269660749425058965363626206341143869952291722141812247131583685388226210268346183302628396804566127408410289666117813212888551097480525384934233265215844321589532846298556918990376006470225030046511910067340413677752473511988716280105256868587486513251142533893230995843273607382703469241767987511329661743658023533122321072512");
    private static final String SAMPLE_MIXING_UUID = "766ae3944f3744f1b059d865fadda924";
    private static final String SAMPLE_INPUT_VOTES = "MTMxOTQ3Njc3NjczMTYyMzYxNzM4MTk0Mzg1NTQ3ODEzMjEzMDI5NTIzMTgyMjQyNjkwNzM0Nzg1MTU2NjQ1NzM1NTc5Nzg3ODMzMDUzMzc4MzE3NTQyMjI1ODgyNDk4NDUyNjQyMTQ0NjI3NTg1MTQ2Mjk5MDI5MzEyNTkxMzM0MzE0MjE3NDQyNTgzNzQwMTQ4MjEzOTQ0NTA3NDM4MDk2NjQ4MDg0MDAwODM3OTQ3ODU1MDEyNTkyNDk0MjA5OTcwMjI3MjI5ODIwNzkzMDg0NzM1NzAzMjU4MzExMDU1NTU5Nzk1MDI3NjQyNDE2NDkzNzA5MjMyNDk0OTA4NTMzMTQwMDc3NzQ0MTUyNzYyNTU2Mzk0MzczMDYyNDI2NDQ0MTU4ODYxNzg1MzI2NjY1NDI4MzY5MjkwMDE1OTgwODI3NzgwNjUwNjE2ODA3NTAzNjg2MzQwNDc1NDIyMjc3OTM2MTQwNjIwMzkwNjA0NjgyMjg5MDU2OTEyMzIzNzc3NDkyNTk4NjE2NzYyNzk1MjY2MDI5OTg3NzIzODI4NDEwODExODY1MDI4OTM4MzMxMzAxNzUzMjUwMDQ1NTExMDUyMTIwNTk1MDQyMTE1MDkzODA5OTM2NzMwODE1OTI3MzQ1MzQ3NzUzNTUwNzUzOTcxMTExODIyOTU2NzEwMTU1ODAwNjA2MzQwMTI1MjQ5NzE5MTgwMjIzNDg5ODQ0MzY2OTEzMDgwNDMwMTQ4OTUxNzc2OTkxOTAxNzA4NTQ2ODQxNzE2MjQ2OTc1ODgwMTY5MDM0MzAzOTczMDY0ODE4ODU1Njd8MjAwNTYwOTE0ODEzOTg2NjI3MzU5NDEzOTk0MTA3ODgzNzExNTg3MzA3NDEzMDg0NDY0NDA2NDEzODAwOTk4NzMyMjgwNzczNjAxMzUyNjE1MzgwNjg3Nzg0OTk2NDI1MjA1MjQ3NTE3OTE5OTgwOTk3OTc3MDc2MDg1MTk3MzM3MjQ5Nzc4NTkyNDUwNzE5MTQzNDkyMTE2Mjc4NjU3MTQ1NjQzMzUzOTg3NjEwODQ4NjIwMjc2MzkxNzcwNjY0ODYyOTk5NTQ2NDYyNTgyNDgwMDQ3MzM4OTcwMTA4NDE3NDc3NjY5ODA3ODcyMjQ5MzAxMzcyMjkxMDkwMzc1NDEwMjgxODUwNDk1NTAwMDc0NTQ3NDk0Njc0NDU3NTI1MjM3ODQ1NTMwNjY4MjgxNDA0NDY2MTY5NTgyNTAzNDU2NDgxNzk3ODcxMTQzNzY3NjE0MzE1ODg4MTAwMjk1MzcxMTYzODI1NDkyODM4NzkyNTQyODEwNzEwNzg1NTM2NDMyOTgwNzU2NDU1OTU0NTc2ODY5MjU0MDIwMzU0NzMxNTI4NzA4MTg0NjYyMDkzMjY0NDU2Njk5MzQ0MjA0MTczOTQ4Mzk1ODk3MzE1OTQzNjQyOTE4NTU4ODMzMTAyMDQ4ODExNDUyNjU4MDAwODc5Nzg0MDYwMTQzOTQ4NjA3MDk5NTczNzI2NjI4NzcyNDE3ODgxNjQzMTMzNzY4NjM1NjQwNjg5MzczMjQ1NTk2NTYyOTU4OTUwOTMyOTUwNjAzNDIzMjE5MzI4MjU2OTQzMDY1NTA4NjkyOTE1OTUzNzE1OTIzNjc=#,000004,01,999902,CHANNEL_ID_UNCONTROLLED\nMjc0ODM4OTYxMzA1MDMwNDIwNDMzMTk0MzcxNTYxOTkzMzU0MzE3MzIyOTI5MDM3NDM0OTQ5MTQ5MTM4MjE4ODY0NDU2MDIzOTQ2ODQ3MDExMzM4NDkwOTkxNTM5NDE3NzI3MTYzMjY4NTI4NDExODM4MTY4MjE5NjA3NTc0MDQzMjc4OTQwMzA5ODgzNTc3MTg5OTUwNjA0NTQ1NDU2ODkyNzEyMjI4NTUxNzg2MTcwNTUxMjMxNzE0MTczMjU5MjE3MzQ2NjE1MTk3ODc2NDUzODIzOTM4NDMzMDcyNDY4ODEzMzA2MjcxNjMyNjMwNTc0ODc1ODgxMzk1MzkwNDcxNzM5OTQzNzE4NjI3ODMwMzMxNDUyOTM3MTYyNzMyOTI4MDI5NjY2NDM0NDAwOTMxMjM1NjExMDE5MDIxNDE3Nzk0MTA1OTgzMTM1NjY4Mjk2MDAyMjM1MzMzMTUwNjc4NjcxOTY1NTUyMDIwMTM3MzMwNjUyMzU2NzcyNjM5NDI3MzgxNTE2Mzg4MTgyNDc0OTg2MDE4NTE5OTAzOTg0OTgyNjc1NjQyNzEyNDI3MzQ2MTMwNDMxNjgyMjI1NDkxNDUwMjg2Nzc5MjU1NDExMjM0ODU1ODI3NDk3NjM3OTg0NzkzMjY4MTcyNjU5NTg4Mjk0NTcyMzUyNTE2OTk0NDQ0MTg2NTA5ODYzMTU3MzE3NDk1OTQ5MTE2NzQ1ODY2MjE3MDk1MzExNDI5NDQ3ODA3NDc0OTEyNDQxNDk5NTU1MzM0NjgxMDU3Nzg1NjkwNjM4MjI2NDQ1Mzg5Mzc2NjQxMjA5fDI3MzE3ODcyNTk1NTYyMzA3NzU3MDk1ODUxMDk2MTA1NTk5MzIwMjUwOTgxOTc5NDgwMTg4MzU0OTE5Mzg3NjA1NzY2NjM1OTYwODU2MjgxODIyOTQ0OTAzNzM4MDMxMzc1NTQwMDk5OTEyMzI1MjU5NTUyMTk3OTY3NjY1MTA0Nzg4NDcwMTE4NzI5ODk0NDIwMTk3MjQwODgwMjY1MDg2OTYxNzAwMzIzMjA3MTI0OTE2MDQzOTQyODk1MDEwMjc2MDEzMjkyNTQ4ODEwNzg3ODM1OTkyNTY0NTkwMTk2Mjg5MDQyMzM5NDUzOTU3NjI0MDE2ODIxMzgzNjAwMjAwODM0MjU0MDQ3OTk4MzI3ODM4Nzc2OTgxNDQ2NTExMjg0MjU0MDY3ODg0NzY2MjUzMTg5MjM5NjExMzE3NTcxMDE1OTgzNTk0NDQ1NTI2NDEzMjg1MjY0NzUwODU0MzMyMTcyNzMzNzQ3NDMyNzg4NjIxMzY2ODE4MjAyMjAwMzAzMDU3ODk0NTQ1Nzc0MjMzMDgzOTY2NjU2MTc0ODg4Mzk4MDI4NzI2MjAwNjQyNTMzMjA2NzQ5ODg0NzcxOTE2NTkyNDg1NDIyNjE5OTA0MDgzOTA4MzgwODM5NDc3MTg1NzA5NDQwMDU3NjA5NDg0MDI2MTU5NDQ5NTM4NzExNzM4MjU2ODY4NDU4MzgxMjkwODc0MDc4ODcyODY4MTA0ODQ3NzczNjQyOTkxNjk1OTM4OTU2MjY5MjUxNzY3NzIwNzcyMjM2MTU0NDE3Mjc3MjM2NzA2OTYzMDM0MjcwMTUzMTk4MDQ=#,000004,01,999902,CHANNEL_ID_UNCONTROLLED\nMTUyMjMyODcyMzQzNDE1NzU2OTAwMTA4OTYwODc1OTUxODM1OTI4Nzc1Mjc4NTg5NDQ4NzI2MzEwMDQzMjYzOTI0ODgzMTMzODM5Mjk3Mzg3NzE5NzMyMTA2ODg4MTM1NDk5NDI5MjY0NjMyNTczNzQ5ODM5OTEwODA3Nzg5MzMyODg1NzE1MjQxMDY0MTM1NzcxNzY1NTkyNzc1OTAwODU2NzQyOTM2MDgwNTY0MjMzNzg2MDQwMTUwNzUwMjA2NTQ5NzU3NzIyMjc1MDkyNzM2NDA1MTU3NjM5MDU4MDQyOTQyODk3MzU4NTM5MjI4MTI0OTkxNzc5ODYxNzUxNTkxOTA0NDg0NzQ0NTY0NDYwNTg0Mzc4OTgyMTA0MzMxMDE0OTIyMTkzNjM1MzQxMDE0NjkxNDIwNzU2ODM2MDI1NzU1MTA0NjIzNTc4MTQ2ODk5MjY3OTc4MTAzMTI0NjA0NTAwOTk4NDMyNzk1ODYzOTYzMDcxOTM4NDAwMjE0NTcwNzY4OTgyMzA1OTg2NDA5NTAwOTc1ODczNDk1NzAwMTkwNjkwNTQ2ODMyMTk3NDI0NzMzNTY4NDE2OTg4MDY3NjIxMDYxMzA4MzIyMzM0NTExODg4Mjk3ODAyODM5Nzk2ODUyNDU3MDU2MzM2MDk4NjkyNTkzMDc5NzU3MjM2MjI2NTM2ODI2OTY5MjM1OTEzNTQ1MDE4MjQwMDQzNzA5NDk4NTcyNjg3ODgzMzE4ODgzODMwNDA4NjUzMzQ0MTM0MzI3MjM2MjQ1NTMxMTY3MjU3NjQyOTE2MDYwODcyNzY3OTk3MTF8ODEyNTU0MTc5NDgyMjE1MTI0MDAyNTYxNDI5Nzc2OTk4NTg0NDUxNjc2MTA1NjA5MzA3MDM1NzYxNjg5OTIxOTkyNDc4NTc3NDE1ODQ5OTAyMzMwMDI3MjE0MTUyNTQ4MzU1Nzc1NzAzOTAxOTYzMTc3MzA1NzY5ODE0MTgxNzMxOTMzOTkxOTg3NTUyNTk1Njg3NzM2NTE0MDYyMTg4NTg3MTkxNzYwMjQ5OTI2MDQzMDg5NzA2OTE4ODAxODk2NDQ0Nzg4MzU1NzE0NjcyMjYyNjI2NzQ4NDYzMTM3OTMyNTM2MjU2ODIxODMyOTkzNTMxMTIzODA0OTIzNjEzMzM2NDExMDE3MzkwMjIwMDA4NzgxOTU1OTU1NjI0ODg3NTU3NDExMjE1NDI0NzE5MjkxNzk1OTA0NDQ4MDQ3MzEzNzY2MzQwMTExODQwOTYxMTc1OTg5ODI2NTA0MjgwMzI0NDkxOTIzNzkzMTUwMjg1NjUxMDM0OTM3Njc4ODA3MDE2Mjk0NDg2Mzk3OTAyNzQyMzY5NzQ3ODg5OTM2MjAzMzM5NjkyODA3OTQxMDQ3MDM2NTkyNDA1MDI1NjAxNjM2NzcxOTI1MjY4NDQ0MjQxOTkxOTQ2NDQ2NjcwNzgyMjIxNjAzNDM4NjcwODkxNzYwNDEzNzkxNzAzNTYxNzkwMjkzNDQ2MDUwMzYzODMwMTUwNzI0NTQ0MjExNTEwNjA1OTE2Mjg0NTE3MzE1ODA4ODc0MTEwMjc0NTIxMzExOTk0MDIwMjY3Njc4OTEyNzU5NTQ2Mjk5MjI3MTI4Mzc3MDg5OTc1MA==#,000004,01,999902,CHANNEL_ID_UNCONTROLLED\np1";
    private static final String SAMPLE_OUTPUT_VOTES = "MTIzODc2NDM3NDEwODYxODY0MTI1NzQ3MDcyNTMxOTM4ODI4MzcxNTI4NjI3MjU5#n#Mzg0Nzc5ODE0NjAzMTI1NjkxODM5MTg1NzUyMjg5OTM5Mjc1Mjg3MjY1NzU2NTQ5#n#MTcxNjYzODI5MDkwNDkzODUyNjM5MzYxNjY3NjY2NjQyNjExODUxNTc1MDg3MDcw#n#Mzc5MjE5MDk1NDY0MTc5MDY4NzAzMDc3Mzc2ODEwMDg4NTkzMzMyMDQ0OTg0MjIy#n#MDYwOTg5MzI2NjMxOTcyNzcxODU2MTE0MTA5MzI4MjM4MDkxNjM1MDk2OTUwMDE3#n#NDUzMzA2OTYyNTk4NzQ3OTk1MDMzNDc2MDc2NTE0MzE0MjgzMDIzNDY0NzcyOTk3#n#ODczMDk2MTU1MTUyNDAyODU3MjE3MDk2NTk5MDQwODI4OTQxNDk2NDg5MjU5NDk3#n#MzE4MDYyNjI3MDY5MTQ1MjgxMjkyNDI4NzcxNzk4NjY4NTM3ODk0MDU5MDg4MzA2#n#NDUxNjAzMzkwMjY4NTg1ODk3MTU2NTE4MTczNDkwNTc5NjM2NTQ3MTA3MDUxMjgy#n#NzY2Mjk0MDEwOTk1MzkwMDU5ODU5NTA3MzM0OTIyODgzMzA1NzkwNjQ4NDExMTUy#n#MjU1ODczOTcwMzI5NzE1OTY5MTc4MjE3NzIxMTI3MzIxMjIxOTQxNjc4NDI5MzM0#n#MjM1NDEwMTg1ODM4MTI1MTQ4NzIwNjgxODQ1MzY1MzgwOTM5MzE1MDM2NzI1NzM5#n#NjExNjg5MzM0NTk4MDIzMjQ5Mzg1NTUyMjgzNDY4OTQzNTY5MzYyMzJ8ODY5OTM0#n#MDc5NDYyMDAyODUwNTEyODQyMjMxNDI4MzUyNjI3NzE1MTc4MzcwMDEwMzg5MTQ5#n#MzQxNjQzNjI1MjYwNDUwMjk3Mjc3Nzg1NDIxMjQwMTI5NzkzNzQ3OTU3NjUzMjQy#n#MTg4MzU4NzU2ODc4NjU1MDUxMTMyODU0NjIyODkyNDEwODgyODM5MTUwOTczNjA1#n#Njk4MTg0NjU2NTM2NDM5NzUzMjUzOTA3NjUxNjM4ODg0NDM0OTE1NDMzNzM3MDIw#n#MDM0ODEyMzkzOTc4NzU3NjQ1MTA5MDkxNjM4ODU1ODc1OTg5NDQ3MDI5MjI5MTky#n#MjYwNjQxMDQyOTk3NjUxNjAzODQ3OTMzMTYyMTUzMzY4MTkwNDU2OTcxNTI2MzA0#n#NzgxMjcwODQyODY2MzA2MDU4MzQ0MTMxNzAyNjkwNjc5ODUyNDIxNDM4MTg3MDg1#n#Njc1ODk1NzQ2MTMyMTcwMDE3MTY5Mzc2NTA4MzA2MTk1NDg1Nzk5NjUxNDUzMzI0#n#NDQwMzkwNTg4MzAyOTQ2NDUxNDg0NzU1MDA1NjMyMTM3Mjc5MzI5Nzc2MzAwMjcz#n#NjU4NTYwNTI2OTM4NzI4ODcxNjE5MTMwNzQzNzU4NzE4NDAyMjg0NTE5MTc2MjA1#n#OTkxMTY1NDgwNjY5Nzc5Njk1MzAwNjQ3MjAwODA5NTIxNTk4MzY3NjU5NjIxNTE0#n#NTU1OTkyODUxNTAyNzg0MTczMzY5NjU5NzA1MTcyNjc2ODM3MjI5NTM1MjU3NDUx#n#Mjg0Mjg4NzAzMTk0NTM5OTY4MzE4NzI3MDMyMDQ2MTkzOA==#,000004,01,999902,CHANNEL_ID_UNCONTROLLED,p1\nNTU3NzI3MTQ4OTUxNzY0OTAxMjI3NzcxNzM0NDc0NDY3NzA5NDM1OTg0MTY5ODA5#n#NjQzMjk3NDQxMDYzMTE3NDUxNzcxMDY1NTI3NTY4NzM2ODg0MDczOTI0MDM1MzAy#n#ODM5NzEwNjcyMzU4ODczMTg4MzI4MzQ4ODUzMjkwODE5NzM1NDk1MTA1OTM2Mjkw#n#MDM5NzU1MzMwMzE0NjIwMDA0MzA5MTkwMDg2NzQzMDMzNTg5NDkzOTk5NjUwOTM5#n#MDQ1OTg3NjgxMTQ4Mjc2MTUwNTYwMjE3MTk1MjU1NDgyNzQ4MjY5NjgxODU1MTE4#n#MDI4NzkzMjYxMzA2NzA0MzcxMDcxMzQ5NzY1NTE1Mzg4Mjk3MTEwMjA0NzM2NjIz#n#MjM1NzQwMTc0NTc1NTc3NjUxMDIwMTYzMzI4ODg2MjYyNDY0NDU5ODc2NDkxOTQy#n#NDQ1NjUwOTQwNDk5NDA3OTk5ODQ3MzcyNzUzOTkxNDUxMzUyNzk3NjI1MTE1NDMy#n#NTg1OTI3MzMwNzYyMTg4NDI5MDUyMDMzNzk4MzQyMjY0ODYxMDkxMzE5MjgxNjk1#n#NDk3OTA0MTkyNjU0MTcxNTg1NjYzNzg1OTIzNTQ4NjAyNzIwNjM0NDQxMTQzNjMx#n#NzM5OTk4ODM1Njc1OTM3NTQwMjc2Njc0NDQ4MjAwNjIzNDIzMDIxOTQ5NDMzOTI1#n#NzI1Mjc5MDkzMzU4MjQwMTgzNjg1NzcwNDk0MTM3MDA3MzI5MzE0Nzk3MjczMjcz#n#Njg2ODE1MzQwNDExNTE2MTkwMTY2NjI3MTQ4OTI2MDUzNTYzNDU5M3w4MjE3NTc1#n#ODk3OTc0ODYzNjg2ODY0OTk2MDE3NjMyMTA0MzI4MTM1NzE5NzYxNDc2NTI1Njg1#n#MTMxODk5Mjg2MTcyMTAwOTU1ODYxMTIzODc3NzQ1NDk1NzU4ODM0NDcyNDU5ODE0#n#Mzk4NTg4NTE2MTQ2MzcyMDA1Nzk4NjcyMDUwNzU5Njc2MjUyMjk1NDYzNDE3MTQ2#n#NjE5NjE4Njg4MDY5OTA3OTYzMDMwMTUyMzUxNzEwMDE2NDc4ODk4NTI5NjMyODQ3#n#MTkzNzg0OTg5MjMyNjI2OTA5MjMyNTg4MjE1NjUwMTY1Njk5NTY0NDcwOTc1OTQz#n#ODEzODgwMDQ5OTM2ODgwNzcyMTk3MDUwMDM2NTc1MDI4NzU5MjE1OTIxODk0MTQy#n#NjcyNjY4MTE1Mjg4MzUxNTk2MTA5ODg5MjAwNTY4OTc1NDc3MzE3MjA2NzY1NTcx#n#MzA3Mjk3MTk3NjgwNjUxOTg2Mjk1ODM4MDY2MDEyNzI0Mjk3OTI0MDgzNDcwNzI5#n#NzI1MzcxMzI5Mzc4OTYzNzA2OTQzNDg3NzQ3NDMxNTgxMDEzNjU3NTI5MDIxNDcw#n#MjgwNzMxNzE4Mzg4NjU5NTYzMzIwOTczNjcxNDY4OTYzMDczMzQ2MjI2NjQ5OTMz#n#ODIxNDAxODQ2MzA0ODE3NTg0NzM4MzM4MTAxNzEyNjc5OTczMzUwOTk0Mzg0Mjc3#n#OTM0OTg0NjA3ODIwMjIzNjY0MDMxNjUyNTAzMzcxMTk2ODk1NzE1MDQ4NTg2MTk5#n#MDcwNzY3MDE5NzA2MDIxMTEzNzEzNjU4OTg4MTEyMzY1#,000004,01,999902,CHANNEL_ID_UNCONTROLLED,p1\nOTkxNDcwMjA5MjgwMjE2NjQ4NTY0MDAzMDQ3MDUyODk2NzQyMzEwMDA5MTQzODQ0#n#NTQyNTAxOTY1OTA1OTE5NTE5MDE1NjEzNjEyMDI1NDQzNTQ4MDM0Nzg5OTM1NjM4#n#MTE3MTQwMDY3NTYzODU3NDAxODU2MzIzNjM3NDcxNTAyNDk0ODk1MDE5OTcwNTgz#n#NjU3MzA4MDU1MTU2ODY3NDQyMTQxNDgyNTAwNDE1NDY0NjMyNDg0MjcwMzEyOTY2#n#ODk0NDk2OTgxMTU4Mzc1ODI4NDA4ODkzMDg5MzIwODI5Njk5MTAxNjExNzM4OTUz#n#NzY3MTI2MjE5OTgyMzI3NTI5MjMxMzA0OTE5NTk2NjczOTQ4MTA1MzQ1NjgzNTg0#n#NDk3OTIxNzU3MDkzOTcxNDIyNzUzNjk0MzcyNTIzMDg4MDk0Nzc3MTQ3MDYxMDA4#n#NTI0NjY5ODUwMTYyOTEwNjEyNTk4MTI1MTYzODU2MjgxNTYwOTYwMDYzNDEzMjM0#n#NDQxMzQ5MTc4NTMwNTYwMTk4MTUyNDExODA2MjEzMTA5MTc3MjAxODExOTcyMzIz#n#MDQ3MzY3OTQ5MzMyOTc0Mjc3NDIyMDYxNzg2NjAzNzkzNTE5NjM1Njc4NzI2NDI3#n#MDI1Nzk1Nzk3OTEzMTA0MjMzNjAwNjQ0NDQ1NTM0MjgyMzEwMzcwMjQzNzMwMjQ5#n#NDkzMDAwNzg1MjkyNzIwMDA2NDUzOTgyNTY1MjU2OTc4NTcyNjMyNDMyNzAxNjQ2#n#MzUzMTU1NTMyNTAzMzE4OTgxMzk5NTUyNjE1ODU1NzQ1NjE3OTIxOHwxNjIzNDYw#n#NzU3NjE4NDg5ODM5MzE5ODg2MTg2Njc4OTA5Njg2MTI2NTgyMjc4NDgwNzc0OTE5#n#Nzg0MTk2NzQwODg5MjIxNDIzMzQxOTY1OTg1Mjg3MTMxNzMxOTQwNzgyMjYyNDI3#n#MDE0MjM0MzMyNjQxNjcxNTk4MDc1Nzg2MjM5MzkwNDk5MzUwNjE2NzgyNDA1ODA1#n#Mjk3ODQ5MzkxOTYzOTAyMDcyMjUzNDg1NzkyMDMyNTAzODg3MDE2ODU3NzI4NDkz#n#NjEyODc3NTY1ODc0NzIyMjA2NDQ0NjcyNzE1NDU5MTI3NDY2ODAzNTAzMTYyMjY5#n#Mjk5NTU5NDM3MjA3Njc0OTI5NzY0ODcwNjU4MDEwNDYzNjMzMDc0ODEyMDY4MTA2#n#MTk2MDMwMTc3NjQ5NzIwMjc2MDE5NDg1MTY0Nzc0MjQyMTc0OTU0MTE5NjU5MTcy#n#MzQzMzU1NDU3MjM3MTIwNjAwMDUyMzE2NjEwNzQ5ODE5NzAzMzA5ODk0ODIyNTIy#n#NjkyNTE2NDI3MjIwNTc4MDcxMDM2NzQ2MDY3MDA5Nzk2OTQ0NzAyNjk4OTk3MDg5#n#OTU5MzM1NTIzMzMxOTEwMzc5NDc5NTMyMjA1NDIwOTYyMjIzMDU5NjAyMjQzMzU1#n#NTQ0MzAzNjIxMjYxNTgwMzk3MjM3NzQ1NTI5NTA5MDQwODY4NTYzMzY3MDUxNjkw#n#ODk5NTI5NzMyMDM1NjE2NjY5NTI0NzI0OTA0ODc1OTgxMDcwNDEwNjk4MjY4MjEw#n#NTM1NDA3NDQ0NDE2OTgxNzUxMjkzNjA0NDI1OTMyMjM0Mw==#,000004,01,999902,CHANNEL_ID_UNCONTROLLED,p1\n";
    private static final String SAMPLE_AUDIT_UUID = "050ec7482895429dbae04688bf22fa57";
    private static final String SAMPLE_INPUT_VOTE_GROUPS = "rO0ABXNyAEZjb20uc2N5dGwuZXZvdGUucHJvdG9jb2wuaW50ZWdyYXRpb24ubWl4aW5nLmJhc2UuVm90ZUdyb3VwQWZmaWxpYXRpb25zaaNW0vQmEAwCAAFMAA5fdm90ZUdyb3VwQWZmc3QAEkxqYXZhL3V0aWwvVmVjdG9yO3hwc3IAEGphdmEudXRpbC5WZWN0b3LZl31bgDuvAQMAA0kAEWNhcGFjaXR5SW5jcmVtZW50SQAMZWxlbWVudENvdW50WwALZWxlbWVudERhdGF0ABNbTGphdmEvbGFuZy9PYmplY3Q7eHAAAAAAAAAAA3VyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cAAAAApzcgARamF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwAAAAAHEAfgAKcQB+AApwcHBwcHBweA==";
    private static final String SAMPLE_OUTPUT_VOTE_GROUPS = "rO0ABXNyAEZjb20uc2N5dGwuZXZvdGUucHJvdG9jb2wuaW50ZWdyYXRpb24ubWl4aW5nLmJhc2UuVm90ZUdyb3VwQWZmaWxpYXRpb25zaaNW0vQmEAwCAAFMAA5fdm90ZUdyb3VwQWZmc3QAEkxqYXZhL3V0aWwvVmVjdG9yO3hwc3IAEGphdmEudXRpbC5WZWN0b3LZl31bgDuvAQMAA0kAEWNhcGFjaXR5SW5jcmVtZW50SQAMZWxlbWVudENvdW50WwALZWxlbWVudERhdGF0ABNbTGphdmEvbGFuZy9PYmplY3Q7eHAAAAAAAAAAA3VyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cAAAAApzcgARamF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwAAAAAHEAfgAKcQB+AApwcHBwcHBweA==";
    private static final String SAMPLE_REENCRYPTION_PROOFS = "rO0ABXNyAENjb20uc2N5dGwuZXZvdGUucHJvdG9jb2wuaW50ZWdyYXRpb24ubWl4aW5nLmJhc2UuUmVFbmNyeXB0aW9uUHJvb2ZzTD/h4+Cu7VUCAAFMAAxfcmVFbmNQcm9vZnN0ABJMamF2YS91dGlsL1ZlY3Rvcjt4cHNyABBqYXZhLnV0aWwuVmVjdG9y2Zd9W4A7rwEDAANJABFjYXBhY2l0eUluY3JlbWVudEkADGVsZW1lbnRDb3VudFsAC2VsZW1lbnREYXRhdAATW0xqYXZhL2xhbmcvT2JqZWN0O3hwAAAAAAAAAAF1cgATW0xqYXZhLmxhbmcuT2JqZWN0O5DOWJ8QcylsAgAAeHAAAAAKc3IAMWNvbS5zY3l0bC5ldm90ZS5wcm90b2NvbC5zaWduZXJzLlNjaG5vcnJTaWduYXR1cmVyhXVPyxEF7wIAA0wAAl9ldAAWTGphdmEvbWF0aC9CaWdJbnRlZ2VyO0wAAl9zcQB+AAlMAAZfc0NvbGxxAH4AAXhwc3IAFGphdmEubWF0aC5CaWdJbnRlZ2VyjPyfH6k7+x0DAAZJAAhiaXRDb3VudEkACWJpdExlbmd0aEkAE2ZpcnN0Tm9uemVyb0J5dGVOdW1JAAxsb3dlc3RTZXRCaXRJAAZzaWdudW1bAAltYWduaXR1ZGV0AAJbQnhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cP///////////////v////4AAAABdXIAAltCrPMX+AYIVOACAAB4cAAAAQCyZBrcGpvOeCwe8rsEN5U8js2wjnruLacDJnHdw6KsKXFew33wq1mVn/ZAEnbl7M32T5a49L7OYdicRXGGliU+VyKy3Kd2SEULtk5xXuRvCZZOXs54D8Dv379IgaE2iUkZcGyYw/vI1hm+66eYKNlAmSpr5Kz+R7PceANcLYwYRKeeqVI/n+gupw41rVJBauruGUOMrHAfpjLCgFLJblox/3EUfusJt2D9dqIrR4FBo7aJOHHbbWUgbApTAG2ecf72Xr6xJ5C8t6xcm37hACLH1dDLSXPlw3YoMUl5shKkFecOhgMTB1S20Zs1lh09DwGUK0CgOQ1SGzFLS3hK//h6eHNxAH4AC////////////////v////7/////dXEAfgAPAAACAHjZVH/Ubk5Fy/dVu/QRqiK5/JQ56goBgt1gmyrRlMx3SVCQE2wNFufkVg/JwwByCZf0nI6UxuIwUyXYmWeQabQ94xIHHWqLyWsZgi2D6hV2BpTuGdjek+hZb+ywwzolKhnl2BZCIN9R/s5kYet8/SZS0Kj+/Su9YFEYehsNabb0ocA245cFTg7IyqOZ7T+aXcljoXGQpYSGJsyLqubx5oDaB8W6RhZyJLo79H4RoYRhuvyY4sEu7rdFCKNg5jtXX0IuaCr8LpgbWk2BF3pmreg0aITd0/owacDuVUxgQ5qyK3ryUGLhgY0mQvClogxGXEeMcZd/SVGzbWuD4Sww6anSZcc/iZ+WxuBdN7c9nV1AgOoMBcED8hDPpjRxjSMg2nziUQlzgwC0lCZPVXmsJfTWtEfdvdcShhsqW4aZKNib7sZnZejtUB+NQ63wozkMwKhheNXbaYgnhNOXgi3PBVPOI60a6Xq3pSjkzAKuob0ftinYWJkPb36MBk+WYTGqHNVtuiZkJoKfdpN/kBeIAJxsa54JB/2l5mLcUcAC0EH1uuvIP6YEKsLWFmhXEn6/lQy+uYm6EJdmogFsq8effKgXEsoo5gv7NR8oa8J76Z24bq75RYpKkatqY93UV+CN9yJ29BdB2brY5l0hEU/fz1Wn+PuQzmvST7BHvEZzVWrReHBwcHBwcHBwcHB4";
    private static final BigInteger SAMPLE_REENCRYPTION_PROOF_E = new BigInteger(
            "22519781860318881430187237378393910440433456793106883439191554045609533190204716026094503488051043531257695232100353994296431999733305913289830606623675094806877884255872439714678914992056169353692036021770097223778392105262307803104951171429150982767069700653909195647599098780046724703785991755259095912786508845222597772887203546632493935590809326329822837682361511439054458165467044490658668908755516611075852591340913731324282531411301527453756791057107929172839003743485012313000403534330922416540828874783338650662007436059441348150729982020830894547783136049564060165623270154715909736116816094492108542441594");
    private static final BigInteger SAMPLE_REENCRYPTION_PROOF_S = new BigInteger(
            "-493020684074253090441814202943522717701370208441363126398875712729282220564717512864025003384397828304919661663248781326114189587464185218891901712747295216027103802371117592107460330251427838278200208310835112530799088682815343769837482237392070262295624000122001178615593585268092748248774691586662204164131984536330232265328847921389545171168935905565346919194484563911723066218646266780939103967547572235939842813297128626610071806139072845105973670520173153018475998804046057422833490265724839294999636612059772209833869367125561374011684697701158000118545601614799067144159252164554960757453937003122401528375491196444501154818679084140239592035300758040962414517029308171665919728009580168625977742237796305205064465069883574233811271506757958472648825345947438665182325089726193550926688911701486967048956383682663530124793279198540753395443519413926629631177282190023429117891791997173623756001340221655107210411195250077446080933487773021663495609914643531254713147745921190932869432453367977666409544586020836459574855183533394573311428737864847451440869431775591914816353018474617948650200395142088756425294383400838321086509553370036186272113035290192887113065018266351046163252106275001148350369237834648249373014977233");
    private static final BigInteger NON_INTERACTIVE_CHALLENGE_X = new BigInteger(
            "-29090930919128789461225041165760090658419566047591463847038592282555655562625");
    private static final BigInteger GENERATOR_G1 = new BigInteger(
            "1576824655595149409933802331706856381937729889105024894771993632958269912017599451624933130933626625298495549945365540521358491792828465523080270419963826162361291380036835450722592335397340648989135863586100090116510126342117682577163787410340591099944866283676157192016875844358947891440853279512639324179600100572373570144445094870191348726464824189095311073768824057670094153745599999895230373005338701725331886991188552293319961140390023978269543748018033001675884952337181163788925146545416677998504582031038396151899741681608924907463584721915676075541230946704584394643197071660892298561797587467660773720132");
    private static final BigInteger PUBLIC_KEY_H1 = new BigInteger(
            "668618404933341745671432392133322314227758478696994840746822974089704228276078081962820161643970292657831704044335704189817348126676493879600281342367817299207496401192505228155800307323391672695267265828405239832527692837431199709951810074320958413290224196733602006359206394877666092847037853484043808533456239234055866865761392195498069440564385302335144357397852032665665399872469784687913008642207201080533606278022188574413162552678291301616277971668048999789781869875003290966213094664852306088301704370514839750816039829679278903899991346609283917132293946200059701266137726146662165293382706096742282712457");
    private static final BigInteger SCHNORR_MESSAGE_W1 = new BigInteger(
            "13861898112344996128091450792067108595013496211897889082058333776034943248091655151992998206023797408844586057600002876050571855411016111745975774659859048281732937766232672032644710049627524539458377567466284537634467566884065250204101328993363174690338802925675160268558442204742131432841820185452777930981511831344745479465457198527058714290891497527089837022065913818401890138100553599194624832803497495802184638826864995971395474248083873725413123323383731174367381492295075489763560359989861743040471567875396316073073219934217112743962791032905786303998884036200646514605505705374607246825738958387252453730099");
    private static final SchnorrSignature SAMPLE_PROOF = new SchnorrSignature(SAMPLE_REENCRYPTION_PROOF_E,
            SAMPLE_REENCRYPTION_PROOF_S);
    private MixingVerificationWorker worker;

    /**
     * Creates a worker to run the unit tests against.
     * @throws ClassNotFoundException Should not be thrown.
     * @throws java.io.IOException  Should not be thrown.
     */
    @BeforeMethod
    public void createWorker() throws IOException, ClassNotFoundException {
        ResultsList results = new ResultsArrayList();
        worker = new MixingVerificationWorker(results, SAMPLE_P, SAMPLE_G,
                new ElGamalPublicKeyList(SAMPLE_H));
        worker.setMixingData(SAMPLE_MIXING_UUID, SAMPLE_INPUT_VOTES.getBytes(),
            SAMPLE_OUTPUT_VOTES.getBytes());
        worker.setAuditData(SAMPLE_AUDIT_UUID,
            Base64.decodeBase64(SAMPLE_INPUT_VOTE_GROUPS),
            Base64.decodeBase64(SAMPLE_OUTPUT_VOTE_GROUPS),
            Base64.decodeBase64(SAMPLE_REENCRYPTION_PROOFS));
    }

    /**
    * Verifies that the mixing UUID is set correctly.
    */
    @Test
    public void mustSetMixingUuidCorrectly() {
        assertEquals(worker.getMixingUuid(), SAMPLE_MIXING_UUID);
    }

    /**
     * Verifies that the input votes are set correctly.
     */
    @Test
    public void mustSetInputVotesCorrectly() {
        assertEquals(worker.getInputVotesString(), SAMPLE_INPUT_VOTES);
    }

    /**
     * Verifies that the output votes are set correctly.
     */
    @Test
    public void mustSetOutputVotesCorrectly() {
        assertEquals(worker.getOutputVotesString(), SAMPLE_OUTPUT_VOTES);
    }

    /**
     * Verifies that the audit UUID is set correctly.
     */
    @Test
    public void mustSetAuditUuidCorrectly() {
        assertEquals(worker.getAuditUuid(), SAMPLE_AUDIT_UUID);
    }

    /**
     * Verifies that the input vote groups are set correctly.
     */
    @Test
    public void mustSetInputVoteGroupsCorrectly() {
        assertVoteGroupIsThreeZeroes(worker.getInputVoteGroups());
    }

    /**
    * Verifies that the output vote groups are set correctly.
    */
    @Test
    public void mustSetOutputVoteGroupsCorrectly() {
        assertVoteGroupIsThreeZeroes(worker.getOutputVoteGroups());
    }

    private void assertVoteGroupIsThreeZeroes(
        VoteGroupAffiliations inputVoteGroups) {
        boolean assertion = inputVoteGroups.size() == THREE;

        for (Integer i : inputVoteGroups.get()) {
            assertion = assertion && (i == 0);
        }

        assertTrue(assertion);
    }

    /**
     * Verifies that the correct number of reencryption proofs has been set correctly.
     */
    @Test
    public void mustSetNumberOfReencryptionProofsCorrectly() {
        assertEquals(worker.getReencryptionProofs().size(), 1);
    }

    /**
     * Verifies that e of the first reencryption proof has been set correctly.
     */
    @Test
    public void mustSetEOfFirstReencryptionProofCorrectly() {
        assertEquals(worker.getReencryptionProofs().get(0).getE(),
            SAMPLE_REENCRYPTION_PROOF_E);
    }

    /**
     * Verifies that s of the first reencryption proof has been set correctly.
     */
    @Test
    public void mustSetSOfFirstReencryptionProofCorrectly() {
        assertEquals(worker.getReencryptionProofs().get(0).getS(),
            SAMPLE_REENCRYPTION_PROOF_S);
    }

    /**
     * Verifies that the input vote groups factors are calculated correctly.
     */
    @Test
    public void mustCalculateInputVoteGroupsFactorsCorrectly() {
        worker.computeInputVoteGroupsFactors();
        assertEquals(worker.getInputVoteGroupsFactors().get(0),
            SAMPLE_EL_GAMAL_INPUT_VOTE_GROUP_FACTORS);
    }

    /**
     * Verifies that the output vote groups factors are calculated correctly.
     */
    @Test
    public void mustCalculateOutputVoteGroupsFactorsCorrectly() {
        worker.computeOutputVoteGroupsFactors();
        assertEquals(worker.getOutputVoteGroupsFactors().get(0),
            SAMPLE_EL_GAMAL_OUTPUT_VOTE_GROUP_FACTORS);
    }

    /**
     * Verifies that the non-interactive challenge x is calculated correctly.
     * @throws java.security.NoSuchAlgorithmException Should not be thrown.
     */
    @Test
    public void mustCalculateNonInteractiveChallengeXCorrectly()
        throws NoSuchAlgorithmException {
        assertEquals(worker.calculateNonInteractiveChallengeX(SAMPLE_G,
                SAMPLE_H, SAMPLE_EL_GAMAL_INPUT_VOTE_GROUP_FACTORS,
                SAMPLE_EL_GAMAL_OUTPUT_VOTE_GROUP_FACTORS),
            NON_INTERACTIVE_CHALLENGE_X);
    }

    /**
     * Verifies that the generator g1 is calculated correctly.
     */
    @Test
    public void mustCalculateGeneratorG1Correctly() {
        assertEquals(worker.calculateGeneratorG1(SAMPLE_P, SAMPLE_G, SAMPLE_H,
                NON_INTERACTIVE_CHALLENGE_X), GENERATOR_G1);
    }

    /**
     * Verifies that the public key h1 is calculated correctly.
     */
    @Test
    public void mustCalculatePublicKeyH1Correctly() {
        assertEquals(worker.calculatePublicKeyH1(SAMPLE_P,
                SAMPLE_EL_GAMAL_INPUT_VOTE_GROUP_FACTORS,
                SAMPLE_EL_GAMAL_OUTPUT_VOTE_GROUP_FACTORS,
                NON_INTERACTIVE_CHALLENGE_X), PUBLIC_KEY_H1);
    }

    /**
     * Verifies that the Schnorr message w1 is calculated correctly.
     */
    @Test
    public void mustCalculateSchnorrMessageW1Correctly() {
        assertEquals(worker.calculateSchnorrMessageW1(SAMPLE_P, GENERATOR_G1,
                PUBLIC_KEY_H1, SAMPLE_PROOF), SCHNORR_MESSAGE_W1);
    }

    /**
     * Verifies that the Schnorr challenge c1 is calculated correctly.
     * @throws java.security.NoSuchAlgorithmException Should not be thrown.
     */
    @Test
    public void mustCalculateSchnorrChallengeC1()
        throws NoSuchAlgorithmException {
        assertEquals(worker.calculateSchnorrChallengeC1(SAMPLE_P, SAMPLE_G,
                SAMPLE_H, SCHNORR_MESSAGE_W1), SAMPLE_REENCRYPTION_PROOF_E);
    }

    /**
     * Verifies that the line with the correct proof returns true when asked for the proof result.
     * @throws java.security.NoSuchAlgorithmException Should not be thrown.
     */
    @Test
    public void mustVerifyCorrectProofAsCorrect()
        throws NoSuchAlgorithmException {
        assertTrue(worker.verifyZeroKnowledgeProof(SAMPLE_P, SAMPLE_G,
                SAMPLE_H, SAMPLE_EL_GAMAL_INPUT_VOTE_GROUP_FACTORS,
                SAMPLE_EL_GAMAL_OUTPUT_VOTE_GROUP_FACTORS, SAMPLE_PROOF));
    }
}
