/**
 * Zero-Knowledge Protocols for E-Vote (ZKPEV).
 *
 * Copyright Â© 2013, The Norwegian Ministry of Local Government and Regional
 * Development (KRD).
 *
 * This file is part of ZKPEV.
 *
 * ZKPEV is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZKPEV is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You can find a copy of the GNU General Public License in
 * /src/site/resources/gpl-3.0-standalone.html. Otherwise, see also
 * http://www.gnu.org/licenses/.
 */
package com.computas.zkpev2013.mixing;

import com.computas.zkpev2013.ElGamalPublicKeyList;
import com.computas.zkpev2013.ResultsArrayList;
import com.computas.zkpev2013.ResultsList;

import com.scytl.evote.protocol.integration.mixing.base.VoteGroupAffiliations;
import com.scytl.evote.protocol.signers.SchnorrSignature;

import org.apache.commons.codec.binary.Base64;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.io.IOException;

import java.math.BigInteger;

import java.security.NoSuchAlgorithmException;


/**
 * Unit tests on MixingVerificationWorker.
 */
public class MixingVerificationWorkerUnitTest {
    private static final int THREE = 3;
    private static final BigInteger SAMPLE_P = new BigInteger(
            "22519781860318881430187237378393910440433456793106883439191554045609533190204716026094503488051043531257695232100353994296431999733305913289830606623675094806877884255872439714678914992056169353692036021770097223778392105262307803104951171429150982767069700653909195647599098780046724703785991755259095912786508845222597772887203546632493935590809326329822837682361511439054458165467044490658668908755516611075852591340913731324282531411301527453756791057107929172839003743485012313000403534330922416540828874783338650662007436059441348150784982317988527563812882812455109992843656727186872083932493433216403334110087");
    private static final ElGamalVoteGroupFactors SAMPLE_EL_GAMAL_INPUT_VOTE_GROUP_FACTORS =
        new ElGamalVoteGroupFactors(SAMPLE_P,
            new BigInteger("21022180365759841205565164111207351409919385667803782390232036093990761037947301741253235049407959024994354682620038483606979166099819210410164166657119341465204729555121623334338281802248929098783147184747938124821849601535386683452229185411564672018859826047735909256056525272540875092573600369399961073772802237699204433883233759592802986137376032192806965456535240454292838598063600150274227496945188006662978011698895859005910753107779492332561598356897878215321359117824363032051759111402114486708119596953041732831609556800086633548953461234428814500800949558496339591090416771591926866289975293530539903561584"),
            new BigInteger("9460782084771607047236761724366243485782631166241327014573989808229172471130871946053778349554902698200605562735708475602154598749170364302478755594749241305606446588195163819776438721153395356500440704206008814188447717126436520867967506983115944411047429383117107034492952048914398573574661610517676310153124672961926689797582927856645417745752434283967341375552095083074174276099837053417266620437092275554955592138195209513655305483706079913324858903657081107088030530793076388579924783352697000118867811088355353408050996636488971403773370461517546367658755040280719944381954173097225940154704567705826862712909"));
    private static final ElGamalVoteGroupFactors SAMPLE_EL_GAMAL_OUTPUT_VOTE_GROUP_FACTORS =
        new ElGamalVoteGroupFactors(SAMPLE_P,
            new BigInteger("14127039782530645475003383742937792953342459815520280772477118631536547747002331576776275345334732292427495174417399061575655960670669283569854954782182828296035218779397151019866233240045549564345910004946765492149881905403766065641745658131506569970587981631057294202403312720923159490589159511626652435123484507213079513989691268176660560656936998674405651939141442644157450325680496512797156881739360619548458223989914496767088604039085855937567156748864593138881616881933222174166204455534077581260013595252412672773567114670403130673031839663643330828602192840390388408033157478877208709018813477865506478563787"),
            new BigInteger("12144429516650351822938218863533982929784253690805704068616840863191206382637718974771051726274510481660215078761010933541329483419023775238821908189966729862799293645163853707526519421139852256760930423561375882119642313457881188366140496561811956217528152894404117178925034454021380977715385644653478262136331584607052183441410894103742588434876788663834525952853523793351390118544740513475286571792232954855493910552131542928094722105075741356826402362340353282030294246189189914733168065982512729884846357705517753750767459943159191110048350227929226862458114084900970309412273683903231093824351420929277816547427"));
    private static final BigInteger SAMPLE_G = new BigInteger(
            "19140805144017540497707786625792286921405966026933054372546212478081606825277100641152753685549997641757412202354820556035283634167831414111680419792323513134593333242130321485704646466132023972092638166348661889738666905149514346301514811888481584122903522192426522565163431677342704016489172931295206771271956675417455593733493182654653217734161457736905965163738973158663182502896276372310802897020170186481607829975539047679142654262779602075975560918037248175928164089234991713304225443874682021320096580809741466636539107495416015820825091232630444699803381650489285110532680106190202164342326569938521995903077");
    private static final BigInteger SAMPLE_H = new BigInteger(
            "15767103161188431726810732547407071177925682470096161113662719329970151989521808605211708980148853646358184785265698288206467886519416824938097511897175394153183299970057910661112235919650701007926207445783398837008410584396746210082523938166164511910717655019379900382402878897548938693825625577255875241671695927055614575927068409397924078583190963658265084557648260898854231641007945637962701179737860118584226735942584888595742172827013353350499066429923853690118418094376964200302533698193066579535824852762698049107984716754445670202902488607524608492482523694573929391910902766007429761724512335207851342013142");
    private static final String SAMPLE_MIXING_UUID = "2ed7bd918b6f4a4dbbb75a1fc6f9d3e0";
    private static final byte[] SAMPLE_INPUT_VOTES = ("IWvRkimscLc7ZnzHRhq5HkKtL0XXlMwZEFu2w7iIdSBCWDAKuxgUNPkA66dqZ7OyuvqePFoXVHLgemivhxRHAtkKALAtdc3ihfDN99u3vrfiPinPLHcidemy056uxPO+9mb96Cs4RVhFDY3DnW6BuZQUuITmrBOEhaaxja7qbijKD7SNX2bwqRv0j4GeasLaGosqDfFqEYd9aLr7x7M6xkk4AhyoPHG7qAI/A1SiwDxF2ocycQgJk7kl4yeJDgBKPFw0F3xZ1f8yVJEr6d8Su8OwdXN/NiFlX9bjKifFK2bgMqJvlsAPXLjK5ms/2VeSIE4atuMnZquzJMpjEICHcQ==#GUM3T8tSx72bLMES4Zh4qKeJun1rkd5i9opb7tcA0bk736GIE/pgeYytK2Igo4fZRgfMou81guVfcL4J6/1Wq2s+NNlFil5HU+9OwnJLc0LV2Q8MXvOs/Vex4nBkbMz4BMORlt0w542Rj2LZX2FdWKkQOSIX1d1BKTcvPljLAzpl3QIMSoK86to7+4+hv16ANUZ6wIepS7giTfFfutWv4nvhLLDO4bCrthVg+YTr+F0urssfMNZcM7CyEd8/EHMYhIhfoOGT8wDZN9bPMp0Z1cLbrOw9nm6luEPD0VEjgjHk+enGXsqQuiQ6rnWSGFn+MV9rkYxTwKXOAgBOqVSnXg==#,000018,01,730071,\n" +
        "WhV3wkXBpR7hSC7aQ9chNur0/fD8fLi91SLp5XrAnsBSHwQbJKRKiO3sIGPitVcnTTZXR3d9M8wLYLCaJ3GGIaLcLSHeiqDf4PLPZRM/WTUZErbhw1rcqIEgGqyqfVhXFSVAUvAYNmhXnkhYrXw82nEs8v2oBlLs2Eg/zsDn1j1LcA6jyrPhgVmKc3Qixxhn+wCJ/IxDxD6lV/o/0T3HrDjyo2ufeUEJdZVjiYi6EXVF6IWQx4dK5R1CTtvPptV+fegbis421NrVug6yt2Nk55fUJW1kowHyp0EscQGbJosTb/FEHNVI1K8mDcYklSl53+K/9QZLJIEl2JsdBp+upQ==#KhVJEp/GpYr8B6bBR9/P2nl6xdhJ3vejWn5FRUKz0TLSS/Y8h2nUaF6DzPg2NyI3qYl/4b/ykM80DWZYjFky2oDqztLinnHSrLrefBMY3dV+UJYDc1vHs6XnM+4VsAQ6jguquW8km3XtKu3bItafsqnzGvfImbG2TPnswnmJO00rq03qKgOBWv5JZWc3ttN1+/19gxwgpo2WJv8Fevqx5CgYk4nzpPDYqnSEVc1anxKo6j7odBXfPOpgGGqwHek7C82gDqHitZ9pw1Ye8VXQ/qH52gpSrTBamZztyX36dlDSLiwDzRJ83N+sdHEcqy4G/ACAzvv/99L5qaBxMPT8hA==#,000018,01,730071,\n" +
        "IWvRkimscLc7ZnzHRhq5HkKtL0XXlMwZEFu2w7iIdSBCWDAKuxgUNPkA66dqZ7OyuvqePFoXVHLgemivhxRHAtkKALAtdc3ihfDN99u3vrfiPinPLHcidemy056uxPO+9mb96Cs4RVhFDY3DnW6BuZQUuITmrBOEhaaxja7qbijKD7SNX2bwqRv0j4GeasLaGosqDfFqEYd9aLr7x7M6xkk4AhyoPHG7qAI/A1SiwDxF2ocycQgJk7kl4yeJDgBKPFw0F3xZ1f8yVJEr6d8Su8OwdXN/NiFlX9bjKifFK2bgMqJvlsAPXLjK5ms/2VeSIE4atuMnZquzJMpjEICHcQ==#TTYm5BNmyn4KwHLv6tiUPWajPOgMLEfI2iC+um2wnYxTL3go1N4cd6e4Ft70gmYovuIa9HAvhTcMdvlAqNSh5oWylb7WoRaI7p3yoQ6s+kwWWTlv3J0UBrpUu4Ez8uOsdn3kD6baDWvqs1Sl20Ty5842T4kPJvBbI6pJEOQxe17ldFpk49bweWYPTXkuKC5Wx38MQ/bT6nocd8uvo8WrxJvRkZl8y/7wa/KqtAZI1WUY6Ry8I2QgZ/8atNBPGlBMTMA63ZwxYl0bLDB1dfdxxYFFFWpRsfHeGvZ3EKDspRas97uCpieU321BB3xthXlICcb6Pz4heHnJX7jGaq24ow==#,000018,01,730071,\n" +
        "p1").getBytes();
    private static final byte[] SAMPLE_OUTPUT_VOTES = ("SZmUOVwGOF620ra6KljO3dpvCEPpOP3CZCJAfqDv4MwMdG9H5V/jsOuC6sJ3sbJp#n#SPIzGGH3jq90NAuTl9M2RZLKqp5MDxP1/RQdI236HWZE2Ilz8VeLEfLvm35mE+Rw#n#3ydXcZhnUCpOWcqcrGbc6D3vekSlDPYy7k6Kd8OkcuDfHDsX9m0BccmurnbdCXYu#n#D6MEjZ6G634X1UFxr41QguPFHv/aerT2Eu6nrD8kaaTSf7WQfAjjJOpuoIGCJset#n#lrZ2FbDn66DswnVemZt0wD2ml4Ps5dU24mzdkGzmtQN0YcUWmmQHFVJ2S/AXfzcH#n#6q3g7RIiMjApkR8h+euCtQ==#YzbQsRSEw5XycaXv3Wnpcq2K8ShRTEk0C9lA69u67ZkCa+hOuGaKu3XDaYjzfD4M#n#MwVvDiVw7j3mu50Up5T1fHB7dSvxmNiXuhPtsGNPjlC7SZu2Kwx5xXg2mZqp8sRQ#n#i8pK9qiMaQu7owGBL9UYS0zETYGMl64AU/BvHZWIuLw4PR+WUAXzr1kBWKsYKGUN#n#8tkY4Z9A3K4zLrSiEPxj3YMg9jaeP/3lbKNod573jcY+fMybt8Z6HexbQdq3BEL1#n#hfNvX/jH8yLj5IFivn6DmlRLre6ELSsViv+crGa1oltrlIgi4q2Yj1a7A63G9Zoj#n#OBSyCjOEmDYYNwI1Ms3ltA==#,000018,01,730071,p1\n" +
        "eDQ3xjcL4bHvtgsHuJ25yJvmsM84NQjNS4uokOKPqvFK9EZNUEjmAA1lThP3iPY+#n#jYJMzDihLpGkBVDjko5qjutAtFU0vms1+jECU/9fTPJOmiBgao9r+eJuXwWizZDn#n#5wI7ULkKh9RMaAEPCSJv9w7YW1AlTI1u0jqCzP90KKFwFmgjt7gp3G/s7aFPPXFX#n#ysciZ0ezYoHmenLMvJCWOcc/zfLxhEWQKzq9oW45NpCqEbkMByZ2Sfbw0WSxnETt#n#lm7p5wDs3o2IEQ9Zg+53GV8DcXSOnev2P6erUfxRvgKjLqluYLaR6qABJmUro374#n#N0KwBVBoKBQLYOoYO8lcTA==#XvE9HvyqDEQk+ODPpPaNrOZy+BKsrGYQWsYBiv1gwPyj4BGjyNAHzxaip24bMYcR#n#2fT10FHQ7OgaNjwifRQufwKIi2X/Vs11zTC+iyygDjRfv+suXhZUFZQHU8wRHnEm#n#KSrAyrK/tiTX7kB1o18oEeCo2hLbqnLRgRMOeGeJBGemDrXuINxgv7mfQEdz3YOg#n#LWfxecKJegRf/qhLjsYVPcqwAjIWNAlZZ3otCyBpL8kIVTMwghoTFltUxZeE/5kL#n#w/WdvYRQjajqwueWi8YB6jRdbpR2OMEde8pCTgMHtvDHkc4Z+lvvJrCFnSTSs0u3#n#amaFDEagw8hLyIRQ2Bir2g==#,000018,01,730071,p1\n" +
        "AJhisjVoXiq1AtxH5eju85Pg4s1QpNK03VpgNHi6wHvKqLvxKiKdx60eAyl4qpz4#n#X8yULppZ/1aaWSjPZKJEa95jiy1OCiSz60PIJga39l+u69BW9PVzDvwgTq9PMNlw#n#b4lqWxRFXjCxkDK8g73atHzUSureldEuDD3evauuePEaK26DJFyidOSLheDly5QO#n#U4OxeFgsZYQUP+Rz7+WkPUHIfDJtCJShAiJikoOMaLOkAhCAreGCS5L7UcPilFyf#n#guUyCs7uAb3Kf3WSIH/vaQs1HShJ5Qaa46eyibGQ3a6vbbDkZ0wz+15n69QvRbUs#n#hHCwmQsynHbBrE7oWVicgAI=#AJd+vhPVzLwGQHvK6EwzB+FJL5j5eJYeMvLU/2/Fz6nvmxQee62BPqzAZBRN3A+K#n#0GTNDli/wyD5lvjkKzDFQaNkYINWNHcpaJoYVRZWNgCDSYEWBAC4n3CDh6FvCoXC#n#ZFUpe+QCDzCEHXE1+/f25+aXT5V/vZK2tljc7TBKH+67zN2L/ZrXAJ1fohF+7Q1Z#n#/h7ZWgCUNYUeuAYibueargohGcKo1x76XChONS7ZdlyNL5jBbm8ADSgJjDOaZi0N#n#MuWZoK2kXL4ha+4XXfCL7mD/wpYyWLWi5Gackfx2AFGuu5zW3rYgBoUeoFNkJj9M#n#/Y55lF5OdZJUYU9J57ljwGU=#,000018,01,730071,p1\n" +
        "01").getBytes();
    private static final String SAMPLE_AUDIT_UUID = "97b089bb78034cb3a193e8b9d308ba13";
    private static final byte[] SAMPLE_INPUT_VOTE_GROUPS = Base64.decodeBase64(
            "rO0ABXNyAEZjb20uc2N5dGwuZXZvdGUucHJvdG9jb2wuaW50ZWdyYXRpb24ubWl4aW5nLmJhc2UuVm90ZUdyb3VwQWZmaWxpYXRpb25zaaNW0vQmEAwCAAFMAA5fdm90ZUdyb3VwQWZmc3QAEExqYXZhL3V0aWwvTGlzdDt4cHNyABBqYXZhLnV0aWwuVmVjdG9y2Zd9W4A7rwEDAANJABFjYXBhY2l0eUluY3JlbWVudEkADGVsZW1lbnRDb3VudFsAC2VsZW1lbnREYXRhdAATW0xqYXZhL2xhbmcvT2JqZWN0O3hwAAAAAAAAAAN1cgATW0xqYXZhLmxhbmcuT2JqZWN0O5DOWJ8QcylsAgAAeHAAAAAKc3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cAAAAABxAH4ACnEAfgAKcHBwcHBwcHg=");
    private static final byte[] SAMPLE_OUTPUT_VOTE_GROUPS = Base64.decodeBase64(
            "rO0ABXNyAEZjb20uc2N5dGwuZXZvdGUucHJvdG9jb2wuaW50ZWdyYXRpb24ubWl4aW5nLmJhc2Uu\n" +
            "Vm90ZUdyb3VwQWZmaWxpYXRpb25zaaNW0vQmEAwCAAFMAA5fdm90ZUdyb3VwQWZmc3QAEExqYXZh\n" +
            "L3V0aWwvTGlzdDt4cHNyABBqYXZhLnV0aWwuVmVjdG9y2Zd9W4A7rwEDAANJABFjYXBhY2l0eUlu\n" +
            "Y3JlbWVudEkADGVsZW1lbnRDb3VudFsAC2VsZW1lbnREYXRhdAATW0xqYXZhL2xhbmcvT2JqZWN0\n" +
            "O3hwAAAAAAAAAAN1cgATW0xqYXZhLmxhbmcuT2JqZWN0O5DOWJ8QcylsAgAAeHAAAAAKc3IAEWph\n" +
            "dmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyV\n" +
            "HQuU4IsCAAB4cAAAAABxAH4ACnEAfgAKcHBwcHBwcHg=");
    private static final byte[] SAMPLE_REENCRYPTION_PROOFS = Base64.decodeBase64(
            "rO0ABXNyAENjb20uc2N5dGwuZXZvdGUucHJvdG9jb2wuaW50ZWdyYXRpb24ubWl4aW5nLmJhc2Uu\n" +
            "UmVFbmNyeXB0aW9uUHJvb2ZzTD/h4+Cu7VUCAAFMAAxfcmVFbmNQcm9vZnN0ABBMamF2YS91dGls\n" +
            "L0xpc3Q7eHBzcgAQamF2YS51dGlsLlZlY3RvctmXfVuAO68BAwADSQARY2FwYWNpdHlJbmNyZW1l\n" +
            "bnRJAAxlbGVtZW50Q291bnRbAAtlbGVtZW50RGF0YXQAE1tMamF2YS9sYW5nL09iamVjdDt4cAAA\n" +
            "AAAAAAABdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAXNyADFjb20uc2N5\n" +
            "dGwuZXZvdGUucHJvdG9jb2wuc2lnbmVycy5TY2hub3JyU2lnbmF0dXJlcoV1T8sRBe8CAANMAAJf\n" +
            "ZXQAFkxqYXZhL21hdGgvQmlnSW50ZWdlcjtMAAJfc3EAfgAJTAAGX3NDb2xscQB+AAF4cHNyABRq\n" +
            "YXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRMZW5ndGhJABNm\n" +
            "aXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFnbml0dWRldAAC\n" +
            "W0J4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHD///////////////7////+AAAAAXVy\n" +
            "AAJbQqzzF/gGCFTgAgAAeHAAAAEAsmQa3BqbzngsHvK7BDeVPI7NsI567i2nAyZx3cOirClxXsN9\n" +
            "8KtZlZ/2QBJ25ezN9k+WuPS+zmHYnEVxhpYlPlcistyndkhFC7ZOcV7kbwmWTl7OeA/A79+/SIGh\n" +
            "NolJGXBsmMP7yNYZvuunmCjZQJkqa+Ss/kez3HgDXC2MGESnnqlSP5/oLqcONa1SQWrq7hlDjKxw\n" +
            "H6YywoBSyW5aMf9xFH7rCbdg/XaiK0eBQaO2iThx221lIGwKUwBtnnH+9l6+sSeQvLesXJt+4QAi\n" +
            "x9XQy0lz5cN2KDFJebISpBYghu9mm8DKW/jQZ0GbudnX7fmQkVKkN2gmgeGa5dYvNHhzcQB+AAv/\n" +
            "//////////////7////+/////3VxAH4ADwAAAgBIfwJdyQdjimVmPsXEV1Vidi+1rI9JVR1nUfgG\n" +
            "YhOz4UmCLQmmAy4xWFQKvaKqPFWxImxVQh59fQdXSaL84RZoaplCNIn2sQAbdsMLLGUUFmqpHyK+\n" +
            "V3DrPcxSY0TTuo/V7PR40tbys8QbgVLG0HA08A73gCbApA1bwB3amaKK0rXwyfzqhZQHLx7qRQgh\n" +
            "+Qm/TrlXAsxk+EaCa05C9m/aST8nHr72ppRcJ/Tt2FvZf6UkG7AS8Qik0t38qWrAUjaJJa2Q7uiL\n" +
            "+XFcnGkovQY5loHcQyzoaeZdKW1atv41S0VoeJQCDqh9OZxsvv11RchInBXGBj7fd1G7bwqpH7bR\n" +
            "BgMCrR058BQ7+gGok91hZtFlHT82Wz7gcxxArH7wkuho+Ij4OE40sOC2CiRFxJNp3n3VS7xQgTf8\n" +
            "iRMKP1PuHBcVt8kULo+FRsCP0sC50VBVM5HRkqy560qNjUCo//7NP6yNx/JCRO84Nb8wxIdt7tPz\n" +
            "Az5ykaEeBYnOIHl+FdetVIoMWjKI/vk3S3otLQrxDrVJi5ske8qVR2D4wEsexXaIEcoZqsAqa7kU\n" +
            "XUzkZC0ac2WruAEeywfHk5qZ4hh2tVHOL7Hf6OFoU3h4KrEMMFBx8jg2Z2ptTV1gLc/lIoFAJgtN\n" +
            "isto9KA6FN0qGbpHixkIT/nDU78kA0tynEl0ZHhweA==");
    private static final BigInteger SAMPLE_REENCRYPTION_PROOF_E = new BigInteger(
            "22519781860318881430187237378393910440433456793106883439191554045609533190204716026094503488051043531257695232100353994296431999733305913289830606623675094806877884255872439714678914992056169353692036021770097223778392105262307803104951171429150982767069700653909195647599098780046724703785991755259095912786508845222597772887203546632493935590809326329822837682361511439054458165467044490658668908755516611075852591340913731324282531411301527453756791057107929172839003743485012313000403534330922416540828874783338650662007436059441348150755976602214714036398210762720115966428922061234263293976410537786341072449332");
    private static final BigInteger SAMPLE_REENCRYPTION_PROOF_S = new BigInteger(
            "-295758406128038983045520030246617417251079474926674676142544597005151304533243207811359460638990580140941995763876580272722378108769176151628492011102950846650973489770242120703176543049702289885962415241175868309323603521819005228794435287232291860539718981213783518238828355052643264797127373372690826262649496498629160425699714932705096722242129984744542458349021276026915163257844100774883600266647956027251460045852074343844528132130158676217953134421678782007592990417193226788340052286159871284830972972152884330166727119017782206161557797445045357581197733716845535266734917737309895045690028999118866460511884028928326498083576472436937390671953603263075243984307795860124350209939040106724573081745593298524115265016818060068245864950721165375443451772635349704200775444257228787982882724900455591027988259900091457835025715867883141243792211971997125062181060698118657625646383749005759356702375989155900801118748632239356633709915764742711784136410644093110220858128124367417587013719215251602210222696260058714743088443765017239307672334810896077767128522852168320007162576753902264187946545550961732516325905190905700874353480244043648194352483626205370640756637406415732341214356153319442111606129631281024759451186276");
    private static final BigInteger NON_INTERACTIVE_CHALLENGE_X = new BigInteger(
            "-29243282527176732395948670480097822939009285479587418200029981649579636749619");
    private static final BigInteger GENERATOR_G1 = new BigInteger(
            "12470314580284183762626850831079548929292678605144377420994865049468470568195383153341041983625902992247699167848663313062568535809874752178155219432582340102342599303167687703251528759955083732147073249156580772328757859121183188970331152474555153613755719233298748221841187709275576768246937643177039131400158440359920608653184178317497173773609709129701836515168959170355831818230955829555088355764182380212202044259197204689071503893354881546503416686507920636613969747289975776007133867558269466004989278196600259847965514262269183084109603978832067643159648540161182230169468177261856899541953696426532220457140");
    private static final BigInteger PUBLIC_KEY_H1 = new BigInteger(
            "10275413647997366891161018177122490398198718258465029175564839066167003675433460015133772080934758201874223501285828364205877242739729718220197345539138558117650434360557642772255706134029637565510253874534271325793606990843892449617679624940871413331150990060433596498668733102141627659939073234945270072251537000504220211281385343176308933078184817404366382626365329859230371464410479462237042246694048870970646045891486387361428491852203706660224777054488696578709882755096324423557988198598663895173051056511104150173344382191246066876498588597220825827795381262504167665155493238036151703440541582524556541363234");
    private static final BigInteger SCHNORR_MESSAGE_W1 = new BigInteger(
            "16277193175426090802080333940479093508787926756524403891418374801377546142804459593681148938947676283782784716536253611570794859577101817267627563022202978342723250101676185047545707242565701641393530699555545566699256981453108240232334129661348700667771062017686201548364411076575945973546986723476282915302141803979486872560925457773568327036799944823122761246933150134909370323528569172159037297490259002765856937004064450183472535535103891554593563696266725763022040213869080375740279860943759296056008501659971752624320143657179262357123092814275198692348545014031816249491316261554649518297642258976052596878994");
    private static final SchnorrSignature SAMPLE_PROOF = new SchnorrSignature(SAMPLE_REENCRYPTION_PROOF_E,
            SAMPLE_REENCRYPTION_PROOF_S);
    private MixingVerificationWorker worker;

    /**
     * Creates a worker to run the unit tests against.
     * @throws ClassNotFoundException Should not be thrown.
     * @throws java.io.IOException  Should not be thrown.
     */
    @BeforeMethod
    public void createWorker() throws IOException, ClassNotFoundException {
        ResultsList results = new ResultsArrayList();
        worker = new MixingVerificationWorker(results, SAMPLE_P, SAMPLE_G,
                new ElGamalPublicKeyList(SAMPLE_H));
        worker.setMixingData(SAMPLE_MIXING_UUID, SAMPLE_INPUT_VOTES,
            SAMPLE_OUTPUT_VOTES);
        worker.setAuditData(SAMPLE_AUDIT_UUID, SAMPLE_INPUT_VOTE_GROUPS,
            SAMPLE_OUTPUT_VOTE_GROUPS, SAMPLE_REENCRYPTION_PROOFS);
    }

    /**
    * Verifies that the mixing UUID is set correctly.
    */
    @Test
    public void mustSetMixingUuidCorrectly() {
        assertEquals(worker.getMixingUuid(), SAMPLE_MIXING_UUID);
    }

    /**
     * Verifies that the input votes are set correctly.
     */
    @Test
    public void mustSetInputVotesCorrectly() {
        assertEquals(worker.getInputVotesString().getBytes(), SAMPLE_INPUT_VOTES);
    }

    /**
     * Verifies that the output votes are set correctly.
     */
    @Test
    public void mustSetOutputVotesCorrectly() {
        assertEquals(worker.getOutputVotesString().getBytes(),
            SAMPLE_OUTPUT_VOTES);
    }

    /**
     * Verifies that the audit UUID is set correctly.
     */
    @Test
    public void mustSetAuditUuidCorrectly() {
        assertEquals(worker.getAuditUuid(), SAMPLE_AUDIT_UUID);
    }

    /**
     * Verifies that the input vote groups are set correctly.
     */
    @Test
    public void mustSetInputVoteGroupsCorrectly() {
        assertVoteGroupIsThreeZeroes(worker.getInputVoteGroups());
    }

    /**
    * Verifies that the output vote groups are set correctly.
    */
    @Test
    public void mustSetOutputVoteGroupsCorrectly() {
        assertVoteGroupIsThreeZeroes(worker.getOutputVoteGroups());
    }

    private void assertVoteGroupIsThreeZeroes(
        VoteGroupAffiliations inputVoteGroups) {
        boolean assertion = inputVoteGroups.size() == THREE;

        for (Integer i : inputVoteGroups.get()) {
            assertion = assertion && (i == 0);
        }

        assertTrue(assertion);
    }

    /**
     * Verifies that the correct number of reencryption proofs has been set correctly.
     */
    @Test
    public void mustSetNumberOfReencryptionProofsCorrectly() {
        assertEquals(worker.getReencryptionProofs().size(), 1);
    }

    /**
     * Verifies that e of the first reencryption proof has been set correctly.
     */
    @Test
    public void mustSetEOfFirstReencryptionProofCorrectly() {
        assertEquals(worker.getReencryptionProofs().get(0).getE(),
            SAMPLE_REENCRYPTION_PROOF_E);
    }

    /**
     * Verifies that s of the first reencryption proof has been set correctly.
     */
    @Test
    public void mustSetSOfFirstReencryptionProofCorrectly() {
        assertEquals(worker.getReencryptionProofs().get(0).getS(),
            SAMPLE_REENCRYPTION_PROOF_S);
    }

    /**
     * Verifies that the input vote groups factors are calculated correctly.
     */
    @Test
    public void mustCalculateInputVoteGroupsFactorsCorrectly() {
        worker.computeInputVoteGroupsFactors();
        assertEquals(worker.getInputVoteGroupsFactors().get(0),
            SAMPLE_EL_GAMAL_INPUT_VOTE_GROUP_FACTORS);
    }

    /**
     * Verifies that the output vote groups factors are calculated correctly.
     */
    @Test
    public void mustCalculateOutputVoteGroupsFactorsCorrectly() {
        worker.computeOutputVoteGroupsFactors();
        assertEquals(worker.getOutputVoteGroupsFactors().get(0),
            SAMPLE_EL_GAMAL_OUTPUT_VOTE_GROUP_FACTORS);
    }

    /**
     * Verifies that the non-interactive challenge x is calculated correctly.
     * @throws java.security.NoSuchAlgorithmException Should not be thrown.
     */
    @Test
    public void mustCalculateNonInteractiveChallengeXCorrectly()
        throws NoSuchAlgorithmException {
        assertEquals(worker.calculateNonInteractiveChallengeX(SAMPLE_G,
                SAMPLE_H, SAMPLE_EL_GAMAL_INPUT_VOTE_GROUP_FACTORS,
                SAMPLE_EL_GAMAL_OUTPUT_VOTE_GROUP_FACTORS),
            NON_INTERACTIVE_CHALLENGE_X);
    }

    /**
     * Verifies that the generator g1 is calculated correctly.
     */
    @Test
    public void mustCalculateGeneratorG1Correctly() {
        assertEquals(worker.calculateGeneratorG1(SAMPLE_P, SAMPLE_G, SAMPLE_H,
                NON_INTERACTIVE_CHALLENGE_X), GENERATOR_G1);
    }

    /**
     * Verifies that the public key h1 is calculated correctly.
     */
    @Test
    public void mustCalculatePublicKeyH1Correctly() {
        assertEquals(worker.calculatePublicKeyH1(SAMPLE_P,
                SAMPLE_EL_GAMAL_INPUT_VOTE_GROUP_FACTORS,
                SAMPLE_EL_GAMAL_OUTPUT_VOTE_GROUP_FACTORS,
                NON_INTERACTIVE_CHALLENGE_X), PUBLIC_KEY_H1);
    }

    /**
     * Verifies that the Schnorr message w1 is calculated correctly.
     */
    @Test
    public void mustCalculateSchnorrMessageW1Correctly() {
        assertEquals(worker.calculateSchnorrMessageW1(SAMPLE_P, GENERATOR_G1,
                PUBLIC_KEY_H1, SAMPLE_PROOF), SCHNORR_MESSAGE_W1);
    }

    /**
     * Verifies that the Schnorr challenge c1 is calculated correctly.
     * @throws java.security.NoSuchAlgorithmException Should not be thrown.
     */
    @Test
    public void mustCalculateSchnorrChallengeC1()
        throws NoSuchAlgorithmException {
        assertEquals(worker.calculateSchnorrChallengeC1(SAMPLE_P, SAMPLE_G,
                SAMPLE_H, SCHNORR_MESSAGE_W1), SAMPLE_REENCRYPTION_PROOF_E);
    }

    /**
     * Verifies that the line with the correct proof returns true when asked for the proof result.
     * @throws java.security.NoSuchAlgorithmException Should not be thrown.
     */
    @Test
    public void mustVerifyCorrectProofAsCorrect()
        throws NoSuchAlgorithmException {
        assertTrue(worker.verifyZeroKnowledgeProof(SAMPLE_P, SAMPLE_G,
                SAMPLE_H, SAMPLE_EL_GAMAL_INPUT_VOTE_GROUP_FACTORS,
                SAMPLE_EL_GAMAL_OUTPUT_VOTE_GROUP_FACTORS, SAMPLE_PROOF));
    }
}
