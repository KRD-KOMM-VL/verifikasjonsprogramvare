~~ Zero-Knowledge Protocols for E-Vote (ZKPEV).
~~
~~ Copyright Â© 2013, The Norwegian Ministry of Local Government and Regional
~~ Development (KRD).
~~
~~ This file is part of ZKPEV.
~~
~~ ZKPEV is free software: you can redistribute it and/or modify it under the
~~ terms of the GNU General Public License as published by the Free Software
~~ Foundation, either version 3 of the License, or (at your option) any later
~~ version.
~~
~~ ZKPEV is distributed in the hope that it will be useful, but WITHOUT ANY
~~ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
~~ A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
~~   
~~ You can find a copy of the GNU General Public License in
~~ /src/site/resources/gpl-3.0-standalone.html. Otherwise, see also
~~ http://www.gnu.org/licenses/.


NIZKP RCG-VCS

* Introduction

  This proof verifies the identity of the voting receipts generated by the Return
  Code Generator (RCG) against the list of votes to be sent from the Vote
  Collector Server (VCS) to the Cleansing module. The identity proofs that the
  list of votes to be sent to the Cleansing module doesn't include a vote that
  the RCG hasn't generated a receipt for. In addition, this proof can also check
  that the receipts posted to an external Bulletin Board match the list of
  votes to be sent to the Cleansing module.

  This proof is non-interactive, and can therefore be run over a set of CSV
  files. These files are the list of votes and the list of receipts held by the
  RCG, the list of votes and the list of receipts held by the VCS, the list of
  votes and the list of receipts to be sent to the Cleanings module by the VCS,
  and the list of receipts posted to the external Bulletin Board.

  The following figure illustrates the relation of this proof to the
  architecture of the E-vote system architecture.
  
[images/NIZKP_RCG-VCS.png] The relation of NIZKP RCG-VCS to the architecture of
                           the E-vote system architecture.

* Breakdown into Subproofs

  The following figure illustrates the relationships between the seven CSV files
  involved in this proof. Each of the relationships should be verified, with the
  most important relationships to be verified marked using a darker color, and
  the less important one marked using a lighter color.

[images/NIZKP_RCG-VCS_Files.png] The relation between the seven CSV files
                                 involved in this proof.

  Notice that the proof can be broken down in two main types of subproofs: a
  line-by-line and field-by-field comparison between CSV files, implemented
  using the Linux commands <<<cut>>>, <<<sort>>> and <<<diff>>>, and a line-by-line verification
  of SHA-256 hash values from one CSV file to another, implemented in Java. The
  following table gives an overview over all the subproofs involved in this
  proof.

*----------------------------------------------------*-------------------*---------------*----------------------------------------*
| <<CSV File Pair>>                                  | <<Subproof Type>> | <<Priority>>  | <<Comments>>                           |
*----------------------------------------------------+-------------------+---------------+----------------------------------------+
| RCG Votes-RCG Receipts                             | SHA-256           | Must          |                                        |
*----------------------------------------------------+-------------------+---------------+----------------------------------------+
| RCG Votes-VCS Votes                                | Cut-sort-diff     | Must          | RCG can contain more votes than VCS    |
*----------------------------------------------------+-------------------+---------------+----------------------------------------+
| VCS Votes-VCS Receipts                             | SHA-256           | Should        |                                        |
*----------------------------------------------------+-------------------+---------------+----------------------------------------+
| RCG Receipts-VCS Receipts                          | Cut-sort-diff     | Should        | RCG can contain more receipts than VCS |
*----------------------------------------------------+-------------------+---------------+----------------------------------------+
| VCS Votes-VCS Votes for Cleansing                  | Cut-sort-diff     | Must          |                                        |
*----------------------------------------------------+-------------------+---------------+----------------------------------------+
| VCS Votes for Cleansing-VCS Receipts for Cleansing | SHA-256           | Should        |                                        |
*----------------------------------------------------+-------------------+---------------+----------------------------------------+
| VCS Receipts-VCS Receipts for Cleansing            | Cut-sort-diff     | Should        |                                        |
*----------------------------------------------------+-------------------+---------------+----------------------------------------+
| VCS Receipts for Cleansing-Bulletin Board Receipts | Cut-sort-diff     | Could         |                                        |
*----------------------------------------------------+-------------------+---------------+----------------------------------------+

* Cut-sort-diff

  This type of subproof requires the following four inputs:

  * The first CSV file

  * A specification of which fields should be extracted from the first file

  * The second CSV file

  * A specification of which fields should be extracted from the second file

  []

  The subproof produces only one output:

  * A log file containing the output from the <<<diff>>> tool

  []

  The following pseudocode outlines the basic algorithm for this type of subproof.

    [[1]] Extract the specified fields from the first CSV file

    [[]] Sort the results alphabetically

    [[]] Write the result to a first temporary file

    [[]] Extract the specified fields from the second CSV file

    [[]] Sort the results alphabetically

    [[]] Write the result to a second temporary file

    [[]] Compare the first and the second temporary file and log the result

* SHA-256 Hash Value Verification

  This type of subproof requires the following two inputs:

  * A list with encrypted votes
  
  * A list with receipts
  
  []
  
  This type of subproof produces only one output:

  * A log file containing a message for every violation found
  
  []
  
  The following pseudocode outlines the basic algorithm for this type of subproof.

    [[1]] <VotingReceipts> := Load voting receipts, setting all matches to 0
  
    [[]] <Votes File> := Open the file with the encrypted votes
  
    [[]] <Log File> := Open a log file 
  
    [[]] <<Until>> end of <Votes File> reached <<do>>
  
         [[1]] <Vote> := Load the next vote from the <Votes File>
       
         [[]] <VotingReceipt> := Calculate the voting receipt for the <Vote>
       
         [[]] <<If>> <VotingReceipts> contains the <VotingReceipt> <<then>>
       
              [[1]] Mark the <VotingReceipt> in <VotingReceipts> with an additional match for
                    <Vote>
         
         [[]] <<Else>>
       
              [[1]] Log to <Log File> the <VotingReceipt>, the <Vote>, and a message that
                    the list of voting receipts didn't contain a matching voting receipt
             
    [[]] Close the <Votes File> 

    [[]] <<For each>> <VotingReceipt> <<in>> <VotingReceipts> <<do>>
  
         [[1]] <<If>> the number of matches for <VotingReceipt> = 0 <<then>>
           
               [[1]] Log to <Log File> the <VotingReceipt> and a message that no encrypted
                     vote generated a matching voting receipt
       
         [[]] <<If>> the number of matches for <VotingReceipt> > 1 <<then>>
  
              [[1]] Log to <Log File> the <VotingReceipt>, the encrypted votes
                    that generated the matching voting receipts, and a message that more
                    than one encrypted vote generated a matching voting receipt
                  
    [[]] Close the <Log File>

* Running the Program

  The program can be run using the script <<<NizkpRcgVcs2013.sh>>>. A correct
  invocation of the script looks like this:
  
-----------------------------------------------------------  
NizkpRcgVcs.sh <RcgVotesFileName> <RcgReceiptsFileName> <VcsVotesFileName> <VcsReceiptsFileName> <VcsVotesForCleansingFileName> <VcsReceiptsForCleansingFileName> <BulletinBoardReceiptsFileName>  
-----------------------------------------------------------

  The arguments are as follows:
  
    * <<<RcgVotesFileName>>>, the name of the file where the program can find the encrypted votes from the RCG.

    * <<<RcgReceiptsFileName>>>, the name of the file where the program can find the RCG voting receipts.
  
    * <<<VcsVotesFileName>>>, the name of the file where the program can find the encrypted votes from the VCS.

    * <<<VcsReceiptsFileName>>>, the name of the file where the program can find the VCS voting receipts.

    * <<<VcsVotesForCleansingFileName>>>, the name of the file where the program can find the encrypted votes from the VCS as they will be sent to the Cleansing module.

    * <<<VcsReceiptsForCleansingFileName>>>, the name of the file where the program can find the VCS voting receipts as they will be sent to the Cleansing module.

    * <<<BulletinBoardReceiptsFileName>>>, the name of the file where the program can find the voting receipts posted to the external Bulletin Board.
  
  The following is an example of a correct invocation of the program:
  
----------------------------------------------------------------------------------------------------------------  
NizkpRcgVcs2013.sh NizkpRcgVcs2013FunctionalTestRcgVotes.csv NizkpRcgVcs2013FunctionalTestRcgReceipts.csv NizkpRcgVcs2013FunctionalTestVcsVotes.csv NizkpRcgVcs2013FunctionalTestVcsReceipts.csv NizkpRcgVcs2013FunctionalTestVcsVotesForCleansing.csv NizkpRcgVcs2013FunctionalTestVcsReceiptsForCleansing.csv NizkpRcgVcs2013FunctionalTestBulletinBoardReceipts.csv
----------------------------------------------------------------------------------------------------------------

* Input

** Encrypted Votes 

   The encrypted votes file is a comma-separated values (CSV) file, with the
   following fields in the following order:

     * <<<UUID>>>: Unique identifier of the vote at database. (<<<String>>>)
     
     * <<<AUTHTOKEN>>>: Is issued by the Authentication Service and that allows
     the other components that the users has the right to vote for a given
     contest. (<<<byte[]>>>)
     
     * <<<AUTHTOKENID>>>: Unique identifier for the authentication token.
     (<<<String>>>)
     
     * <<<ENCVOTEOPTIDS>>>: The ballot encrypted option identifiers.
     (<<<String>>>)
     
     * <<<ENCVOTESIG>>>: The ballot signature. (<<<byte[]>>>)
     
     * <<<INTERNALAUTHTOKENID>>>: The ballot's internal assertion identifier.
     (<<<String>>>)
     
     * <<<ELECTIONTYPE>>>: The election type.
     (<<<String>>>)

     * <<<VOTETIMESTAMP>>>: The ballot time stamp. (<<<Date>>>)
         
     * <<<VOTERCERTIFICATE>>>: The voter's certificate corresponding to the
     private key that was used to sign the vote. (<<<String>>>)
     
     * <<<VOTERAREA>>>: The voter area path related to the voter. (<<<String>>>)
     
     * <<<CONTESTID>>>: The contest of the ballot. (<<<String>>>)
     
     * <<<ELECTIONID>>>: The election of the ballot. (<<<String>>>)
     
     * <<<ELECTIONEVENTID>>>: The election event of the ballot. (<<<String>>>)
     
     * <<<VOTERID>>>: The SSN of the voter. (<<<String>>>)
     
     * <<<CHANNELID>>>: The channel through witch the vote is cast
     (<<<CHANNEL_ID_CONTROLLED>>>, <<<CHANNEL_ID_UNCONTROLLED>>>) (<<<String>>>)

     * <<<RECEIPTTIMESTAMP>>>: The receipt time stamp. (<<<Date>>>)

     * <<<VOTEZKPROOFSIG>>>: The voter Schnorr signature proof (optionally). (<<<byte[]>>>)

** Voting Receipts

   The first input file is a comma-separated values (CSV) file, with the
   following fields in the following order:

     * <<<UUID>>>: Unique identifier of the receipt at database. (<<<String>>>)
     
     * <<<AUTHTOKENID>>>: Unique identifier for the authentication token. 
     (<<<String>>>)
     
     * <<<FULLVOTINGRECEIPT>>>: The serialization of the receipt. (<<<byte[]>>>)
     
     * <<<INTERNALAUTHTOKENID>>>: The ballot's internal assertion identifier. 
     (<<<String>>>)
     
     * <<<RCGID>>>: The identifier of the RCG. (<<<Long>>>)
     
     * <<<VOTINGRECEIPT>>>: Bitwise concatenation of encrypted vote and the auth
     token. (<<<byte[]>>>)
     
     * <<<CONTESTID>>>: The contest of the receipt. (<<<String>>>)
     
     * <<<ELECTIONID>>>: The election of the receipt. (<<<String>>>)
     
     * <<<ELECTIONEVENTID>>>: The election event of the receipt. (<<<String>>>)
     
* Output

  The output of this program is a result file, listing all incidents that
  occurred during its execution. The following is an overview over the incidents
  the program can detect:
  
    * <<<DoubleOccurrenceOfVotingReceiptIncident>>>: The same voting receipt
    appeared twice in the file with voting receipts. The results file will
    show the voting receipt in question.

    * <<<EncryptedVoteBrokenLineIncident>>>: The file with the encrypted
    votes contained a line that didn't conform to the format. The results
    file will show the first eighty characters of the line, commas being
    replaced by apostrophes.
    
    * <<<EncryptedVoteWithoutVotingReceiptIncident>>>: An encrypted vote
    generated a voting receipt that wasn't registered in the voting receipts
    file. The results file will show the UUID of the encrypted vote in question.
    
    * <<<VotingReceiptBrokenLineIncident>>>: The file with the voting
    receipts contained a line that didn't conform to the format. The results
    file will show the first eighty characters of the line, commas being
    replaced by apostrophes.
    
    * <<<VotingReceiptCollisionIncident>>>: Two or more encrypted votes
    generated the same voting receipt. The results file will show the voting
    receipt in question, and the UUIDs of the encrypted votes.
    
    * <<<VotingReceiptWithoutEncryptedVoteIncident>>>: There was no
    encrypted vote that generated a voting receipt registered. The
    results file will show the voting receipt in question.
    
