~~ Zero-Knowledge Protocols for E-Vote (ZKPEV).
~~
~~ Copyright Â© 2011, The Norwegian Ministry of Local Government and Regional
~~ Development (KRD).
~~
~~ This file is part of ZKPEV.
~~
~~ ZKPEV is free software: you can redistribute it and/or modify it under the
~~ terms of the GNU General Public License as published by the Free Software
~~ Foundation, either version 3 of the License, or (at your option) any later
~~ version.
~~
~~ ZKPEV is distributed in the hope that it will be useful, but WITHOUT ANY
~~ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
~~ A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
~~   
~~ You can find a copy of the GNU General Public License in
~~ /src/site/resources/gpl-3.0-standalone.html. Otherwise, see also
~~ http://www.gnu.org/licenses/.

~~ $Id: NIZKP_RCG-VCS.apt 11000 2011-10-18 14:10:56Z fvl $

NIZKP RCG-VCS

* Introduction

  This proof verifies the identity of the voting receipts generated by the Return Code
  Generator (RCG) with the voting receipts to be calculated from the encrypted votes stored by the
  Vote Collector Server (VCS). The identity proofs that the VCS hasn't removed
  any votes that the RCG has registered, and that the RCG hasn't accepted any
  votes it should have rejected. This proof is non-interactive, and can
  therefore be run over two CSV files: one containing the voting receipts from the RCG,
  and one containing the encrypted votes stored by the VCS. The following figure
  illustrates the relation of this proof to the architecture of the E-vote
  system architecture.
  
[images/NIZKP_RCG-VCS.png] The relation of NIZKP RCG-VCS to the architecture of
                           the E-vote system architecture.

* Basic Algorithm

  This proof requires the following two inputs:

  * The voting receipts from the RCG
  
  * The encrypted votes from the VCS
  
  []
  
  The algorithm produces only one output:

  * A log file containing a message for every violation found
  
  []
  
  The following pseudocode outlines the basic algorithm for this proof.

    [[1]] <VotingReceipts> := Load voting receipts from RCG, setting all matches to 0
  
    [[]] <Votes File> := Open the file with the encrypted votes from the VCS
  
    [[]] <Log File> := Open a log file 
  
    [[]] <<Until>> end of <Votes File> reached <<do>>
  
         [[1]] <Vote> := Load the next vote from the <Votes File>
       
         [[]] <VotingReceipt> := Calculate the voting receipt for the <Vote>
       
         [[]] <<If>> <VotingReceipts> contains the <VotingReceipt> <<then>>
       
              [[1]] Mark the <VotingReceipt> in <VotingReceipts> with an additional match for
                    <Vote>
         
         [[]] <<Else>>
       
              [[1]] Log to <Log File> the <VotingReceipt>, the <Vote>, and a message that
                    the list of voting receipts from the RCG didn't contain a matching voting receipt
             
    [[]] Close the <Votes File> 

    [[]] <<For each>> <VotingReceipt> <<in>> <VotingReceipts> <<do>>
  
         [[1]] <<If>> the number of matches for <VotingReceipt> = 0 <<then>>
           
               [[1]] Log to <Log File> the <VotingReceipt> and a message that no encrypted
                     vote from the VCS generated a matching voting receipt
       
         [[]] <<If>> the number of matches for <VotingReceipt> > 1 <<then>>
  
              [[1]] Log to <Log File> the <VotingReceipt>, the encrypted votes from the VCS
                    that generated the matching voting receipts, and a message that more
                    than one encrypted from from the VCS generated a matching voting receipt
                  
    [[]] Close the <Log File>
  
  Voting receipts are calculated as follows from an encrypted vote:
  
    [[1]] <Message> := <<<"">>>
  
    [[]] <<For each>> <EncVoteOptId> <<in>> <EncVoteOptIds> <<do>>
  
         [[1]] <Message> := <Message> || <EncVoteOptId>
       
    [[]] <Message> := <Message> || <VoterId> || <VoteZKProofSig> ||
                      <ElectionEventId> || <ElectionId> || <ContestId> || 
                      <VoteTimestamp> || <AuthTokenId> || <InternalAuthTokenId>
  
    [[]] <Message> := <Message> || <EncVoteSig> || <VoterCertificate>
  
    [[]] <Message> := <Message> || <AuthTokenMessage>
  
    [[]] <VotingReceipt> := Base64(Base64(SHA-1(<Message>)))
    
  <<Note:>> The <AuthTokenMessage> is calculated using the <<<toByteArray>>>
  method of the <<<AuthToken>>> class. This class, and all classes used by this
  class, has been copied into this project from the E-vote project's source
  code. <<<AuthToken>>> objects are deserialized from the VCS encrypted votes
  file using Java serialization.

* Running the Program

  The program can be run using the script <<<NizkpRcgVcs.sh>>>. A correct
  invocation of the script looks like this:
  
-----------------------------------------------------------  
NizkpRcgVcs.sh <RcgFileName> <VcsFileName> [<ResultsFileName>]  
-----------------------------------------------------------

  The arguments are as follows:
  
    * <<<RcgFileName>>>, the name of the file where the program can find the RCG voting receipts.
  
    * <<<VcsFileName>>>, the name of the file where the program can find the encrypted
    votes from the VCS.
  
    * <<<ResultsFileName>>>, the name of the file where the program can write the results
    to. This argument is optional; if it is not provided, no results will be
    written to a file.
  
  The following is an example of a correct invocation of the program:
  
----------------------------------------------------------------------------------------------------------------  
NizkpRcgVcs.sh NizkpRcgVcsFunctionalTestRcgVotingReceipts.csv NizkpRcgVcsFunctionalTestVcsEncryptedVotes.csv Results.csv
----------------------------------------------------------------------------------------------------------------

  The following invocation will do the same thing, but will not write the 
  results to a file:

----------------------------------------------------------------------------------------------------
NizkpRcgVcs.sh NizkpRcgVcsFunctionalTestRcgVotingReceipts.csv NizkpRcgVcsFunctionalTestVcsEncryptedVotes.csv
----------------------------------------------------------------------------------------------------

* Input

** RCG Voting Receipts

   The first input file is a comma-separated values (CSV) file, with the
   following fields in the following order:

     * <<<UUID>>>: Unique identifier of the receipt at database. (<<<String>>>)
     
     * <<<AUTHTOKENID>>>: Unique identifier for the authentication token. 
     (<<<String>>>)
     
     * <<<FULLVOTINGRECEIPT>>>: The serialization of the receipt. (<<<byte[]>>>)
     
     * <<<INTERNALAUTHTOKENID>>>: The ballot's internal assertion identifier. 
     (<<<String>>>)
     
     * <<<RCGID>>>: The identifier of the RCG. (<<<Long>>>)
     
     * <<<VOTINGRECEIPT>>>: Bitwise concatenation of encrypted vote and the auth
     token. (<<<byte[]>>>)
     
     * <<<CONTESTID>>>: The contest of the receipt. (<<<String>>>)
     
     * <<<ELECTIONID>>>: The election of the receipt. (<<<String>>>)
     
     * <<<ELECTIONEVENTID>>>: The election event of the receipt. (<<<String>>>)
     
     * <<<VOTERAREA>>>: The voter area path related to the voter of the receipt. 

** VCS Encrypted Votes

   The second input file is a comma-separated values (CSV) file, with the
   following fields in the following order:

     * <<<UUID>>>: Unique identifier of the vote at database. (<<<String>>>)
     
     * <<<AUTHTOKEN>>>: Is issued by the Authentication Service and that allows
     the other components that the users has the right to vote for a given
     contest. (<<<byte[]>>>)
     
     * <<<AUTHTOKENID>>>: Unique identifier for the authentication token.
     (<<<String>>>)
     
     * <<<ENCVOTEOPTIDS>>>: The ballot encrypted option identifiers.
     (<<<String>>>)
     
     * <<<ENCVOTESIG>>>: The ballot signature. (<<<byte[]>>>)
     
     * <<<INTERNALAUTHTOKENID>>>: The ballot's internal assertion identifier.
     (<<<String>>>)
     
     * <<<VOTETIMESTAMP>>>: The ballot time stamp. (<<<Date>>>)
     
     * <<<VOTEZKPROOFSIG>>>: The voter Schnorr signature proof. (<<<byte[]>>>)
     
     * <<<VOTERCERTIFICATE>>>: The voter's certificate corresponding to the
     private key that was used to sign the vote. (<<<String>>>)
     
     * <<<VOTERAREA>>>: The voter area path related to the voter. (<<<String>>>)
     
     * <<<CONTESTID>>>: The contest of the ballot. (<<<String>>>)
     
     * <<<ELECTIONID>>>: The election of the ballot. (<<<String>>>)
     
     * <<<ELECTIONEVENTID>>>: The election event of the ballot. (<<<String>>>)
     
     * <<<VOTERID>>>: The SSN of the voter. (<<<String>>>)
     
     * <<<CHANNELID>>>: The channel through witch the vote is cast
     (<<<CHANNEL_ID_CONTROLLED>>>, <<<CHANNEL_ID_UNCONTROLLED>>>) (<<<String>>>)

* Output

  The output of this program is a result file, listing all incidents that
  occurred during its execution. The following is an overview over the incidents
  the program can detect:
  
    * <<<DoubleOccurrenceOfRcgVotingReceiptIncident>>>: The same voting receipt
    appeared twice in the file with RCG voting receipts. The results file will
    show the voting receipt in question.
    
    * <<<RcgVotingReceiptBrokenLineIncident>>>: The file with the RCG voting
    receipts contained a line that didn't conform to the format. The results
    file will show the first eighty characters of the line, commas being
    replaced by apostrophes.
    
    * <<<RcgVotingReceiptCollisionIncident>>>: Two or more encrypted votes
    generated the same voting receipt. The results file will show the voting
    receipt in question, and the UUIDs of the encrypted votes.
    
    * <<<RcgVotingReceiptWithoutVcsEncryptedVoteIncident>>>: There was no
    encrypted vote that generated a voting receipt registered by the RCG. The
    results file will show the voting receipt in question.
    
    * <<<VcsEncryptedVoteBrokenLineIncident>>>: The file with the VCS encrypted
    votes contained a line that didn't conform to the format. The results
    file will show the first eighty characters of the line, commas being
    replaced by apostrophes.
    
    * <<<VcsEncryptedVoteNotRegisteredByRcgIncident>>>: An encrypted vote
    generated a voting receipt that wasn't registered by the RCG. The results
    file will show the UUID of the encrypted vote in question.

* Sample Files

  Two sample files containing RCG voting receipts and VCS encrypted votes are
  provided with this program. The following figure sketches the design of the
  sample files:

[images/NIZKP_RCG-VCS_Sample_File_Design.png] Design of the sample file for the
                                              NIZKP RCG-VCS program.
                                              
  The sample files are designed to illustrate the following cases:
  
    * <<<A>>>: The normal case, i.e. a pair consisting of an encrypted vote
    that generates a voting receipt that occurs only once in the list of voting
    receipts at the RCG.
    
    * <<<B>>>: Generates a <<<DoubleOccurrenceOfRcgVotingReceiptIncident>>>.
    
    * <<<C>>>: Generates a <<<RcgVotingReceiptCollisionIncident>>>.
    
    * <<<D>>> and <<<D'>>>: Generate a <<<RcgVotingReceiptCollisionIncident>>>.
    
    * <<<E>>>: Generates a <<<RcgVotingReceiptWithoutVcsEncryptedVoteIncident>>>.
    
    * <<<F>>>: Generates a <<<VcsEncryptedVoteNotRegisteredByRcgIncident>>>.
    
    * <<<*>>>: Generates a <<<RcgVotingReceiptBrokenLineIncident>>>.
    
    * <<<#>>>: Generates a <<<VcsEncryptedVoteBrokenLineIncident>>>.

  Use the following command from the command-line in order to run the program
  against the two sample files, directing all output to a file called
  <<<Results.csv>>>:
  
----------------------------------------------------------------------------------------------------------------  
NizkpRcgVcs.sh NizkpRcgVcsFunctionalTestRcgVotingReceipts.csv NizkpRcgVcsFunctionalTestVcsEncryptedVotes.csv Results.csv
----------------------------------------------------------------------------------------------------------------

  The program should then output the following information to the console:
  
----------------------------------------------------------------------------------------------------
INFO - Results file Results.csv opened for writing.
INFO - Loading the RCG voting receipts from NizkpRcgVcsFunctionalTestRcgVotingReceipts.csv.
INFO - All RCG voting receipts loaded.
INFO - Loading the encrypted votes from the VCS from NizkpRcgVcsFunctionalTestVcsEncryptedVotes.csv.
INFO - All encrypted votes from the VCS loaded.
INFO - Results file Results.csv closed for writing; wrote 7 events.
INFO - Done.
----------------------------------------------------------------------------------------------------

  The content of the file <<<Results.csv>>> should look like this:

----------------------------------------------------
DoubleOccurrenceOfRcgVotingReceiptIncident,TXJmT2pEMExySHM0ZzFYdlJWTEkzOGdOSDRjPQ==
RcgVotingReceiptBrokenLineIncident,*
VcsEncryptedVoteBrokenLineIncident,#
VcsEncryptedVoteNotRegisteredByRcgIncident,4028806a2fda69fd012fda7a46b10012
RcgVotingReceiptWithoutVcsEncryptedVoteIncident,NzlRUUgrdzEwM2J1emNXR05FWVVDZGt5WDFVPQ==
RcgVotingReceiptCollisionIncident,MDVVR0I3VW9MQmF3UTlsYW1oZVdCQ0dpR1p3PQ==,4028806a2fda69fd012fdab9ce9c0015,4028806a2fda69fd012fdab9ce9c0016
RcgVotingReceiptCollisionIncident,SkFEMHQvSmd1dnNkaUZUS3ZWdnlRd0R3ODE0PQ==,4028806a2fde06e0012fde40c5aa000e,4028806a2fde06e0012fde40c5aa000f
----------------------------------------------------
