~~ Zero-Knowledge Protocols for E-Vote (ZKPEV).
~~
~~ Copyright Â© 2011, The Norwegian Ministry of Local Government and Regional
~~ Development (KRD).
~~
~~ This file is part of ZKPEV.
~~
~~ ZKPEV is free software: you can redistribute it and/or modify it under the
~~ terms of the GNU General Public License as published by the Free Software
~~ Foundation, either version 3 of the License, or (at your option) any later
~~ version.
~~
~~ ZKPEV is distributed in the hope that it will be useful, but WITHOUT ANY
~~ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
~~ A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
~~   
~~ You can find a copy of the GNU General Public License in
~~ /src/site/resources/gpl-3.0-standalone.html. Otherwise, see also
~~ http://www.gnu.org/licenses/.

~~ $Id: NIZKP_Cleansing.apt 11000 2011-10-18 14:10:56Z fvl $

NIZKP Cleansing

* Introduction

  This proof verifies that the result of the
  cleansing services doesn't contain any votes that weren't registered in the
  Vote Collector Server (VCS). In order to do that, it has also to check that
  the votes from the VCS have been compressed correctly. This proof is 
  non-interactive, and can therefore be run over two CSV files: one containing
  the encrypted votes from the VCS, and one containing the result from the 
  cleansing service. The following figure
  illustrates the relation of this proof to the architecture of the E-vote
  system architecture.
  
[images/NIZKP_Cleansing.png] The relation of NIZKP Cleansing to the architecture of
                           the E-vote system architecture.

* Basic Algorithm

  This proof requires the following four inputs:
  
  * The ElGamal parameters
  
  * The list with voter areas
  
  * The encrypted votes from the VCS
  
  * The result of the cleansing service
  
  []
  
  The algorithm produces only one output:

  * A log file containing a message for every violation found
  
  []
  
  The following pseudocode outlines the basic algorithm for this proof.

    [[1]] <Log File> := Open a log file
    
    [[]] <Voter Areas> := Load the voter areas from <Voter Areas File>
    
    [[]] <Cleansed Votes> := An empty collection
    
    [[]] <<For each>> <Cleansed File> <<in>> <Cleansed Files Directory> <<do>>
    
         [[1]] <Cleansed File Votes> := Load the cleansed votes from the <Cleansed File>
         
         [[]] Add the <Cleansed File Votes> to the <Cleansed Votes>
  
    [[]] <Encrypted Votes File> := Open the file with the encrypted votes from the VCS
  
    [[]] <<Until>> end of <Encrypted Votes File> reached <<do>>
  
         [[1]] <Encrypted Vote> := Load the next vote from the <Encrypted Votes File>
               
         [[]] Add <Encrypted Vote> to the <Encrypted Votes> and set the
              number of matches to 0
                             
    [[]] Close the <Votes File> 

    [[]] <<For each>> <Cleansed Vote> <<in>> <Cleansed Votes> <<do>>
  
         [[1]] <<If>> <Encrypted Votes> contains a match <Encrypted Vote> for the <Cleansed Vote> <<then>>
         
              [[1]] Mark the <Encrypted Vote> with an additional match for <Cleansed Vote>   
                    
         [[]] <<Else>>         
                  
              [[1]] Log to <Log File> the <Cleansed Vote> and a message that
                    the <Encrypted Votes> didn't contain a matching <Encrypted Vote>

    [[]] <<For each>> <Encrypted Vote> <<in>> <Encrypted Votes> <<do>>
       
         [[]] <<If>> the number of matches for <Encrypted Vote> > 1 <<then>>
  
              [[1]] Log to <Log File> the <Encrypted Vote>, the cleansed votes
                    that matched the encrypted vote, and a message that more
                    than one cleansed vote generated a matching compressed vote
                                      
    [[]] Close the <Log File>
  
  A compressed vote is calculated from an encypted vote by taking all the
  encrypted vote option IDs and multiplying them with each other, and multiplying
  the result with the prime number from the voter area.

* Running the Program

  The program can be run using the script <<<NizkpCleansing.sh>>>. A correct
  invocation of the script looks like this:
  
-----------------------------------------------------------  
NizkpCleansing.sh <ElGamalPropertiesFileName> <VoterAreas> <VcsFileName> <CleansedFilesDirectory> [<ResultsFileName>]  
-----------------------------------------------------------

  The arguments are as follows:
  
    * <<<ElGamalPropertiesFileName>>>, the name of the file where the program
      can find the ElGamal encryption system properties.
      
    * <<<VoterArea>>>, the name of the file where the program can find the
      definition of all voter areas together with their prime numbers.
    
    * <<<VcsFileName>>>, the name of the file where the program can find the encrypted
      votes from the VCS.
    
    * <<<CleansedFilesDirectory>>>, the name of the directory where the program
      can find the files from the cleansing process containing the cleansed
      encrypted votes.
  
    * <<<ResultsFileName>>>, the name of the file where the program can write the results
      to. This argument is optional; if it is not provided, no results will be
      written to a file.
  
  The following is an example of a correct invocation of the program:
  
----------------------------------------------------------------------------------------------------------------  
NizkpCleansing.sh NizkpCleansingFunctionalTestElGamalProperties.properties NizkpCleansingFunctionalTestAreas.csv NizkpCleansingFunctionalTestVcsEncryptedVotes.csv NizkpCleansingFunctionalTestCleansedFilesDirectory/ Results.csv
----------------------------------------------------------------------------------------------------------------

  The following invocation will do the same thing, but will not write the 
  results to a file:

----------------------------------------------------------------------------------------------------
NizkpCleansing.sh NizkpCleansingFunctionalTestElGamalProperties.properties NizkpCleansingFunctionalTestAreas.csv NizkpCleansingFunctionalTestVcsEncryptedVotes.csv NizkpCleansingFunctionalTestCleansedFilesDirectory/
----------------------------------------------------------------------------------------------------

* Input

** ElGamal Encryption System Properties

   The first input file is a properties file containing all the properties
   defining the ElGamal encryption system used for the encryption of the votes:
   
     * <<<p>>>: The modulus for the multiplicative group in which <G> is
       defined. (<<<BigInteger>>>)

     * <<<q>>>: The order of the cyclic group <G>. (<<<BigInteger>>>)

     * <<<generator>>>: The generator for the cyclic group <G>.
       (<<<BigInteger>>>)
       
   Only <<<p>>> is used by the program, and the other parameters can therefore
   be omitted.
   
** Voter Areas

   The second input file is a comma-separated values (CSV) file, with the
   following fields in the following order:
   
     * <<<PATH>>>: The path. (<<<String>>>)
     
     * <<<PRIME>>>: The voter area's prime number. (<<<Integer>>>)
     
     * <<<THRESHOLD_AREA>>>: The path of the area that should be used if the 
       number of votes submitted in this area doesn't reach a certain threshold.
     
     * <<<AREA_100>>>: The path of the area that should be used instead of this
       area because there are less then hundred voters registered in this area.
   
   Note: Before you run the programme, make sure that the file doesn't contain
   empty lines. If it contains empty lines, the programme will stop complaining
   it couldn't parse the arguments.

** VCS Encrypted Votes

   The third input file is a comma-separated values (CSV) file, with the
   following fields in the following order:

     * <<<UUID>>>: Unique identifier of the vote at database. (<<<String>>>)
     
     * <<<AUTHTOKEN>>>: Is issued by the Authentication Service and that allows
     the other components that the users has the right to vote for a given
     contest. (<<<byte[]>>>)
     
     * <<<AUTHTOKENID>>>: Unique identifier for the authentication token.
     (<<<String>>>)
     
     * <<<ENCVOTEOPTIDS>>>: The ballot encrypted option identifiers.
     (<<<byte[]>>>)
     
     * <<<ENCVOTESIG>>>: The ballot signature. (<<<byte[]>>>)
     
     * <<<INTERNALAUTHTOKENID>>>: The ballot's internal assertion identifier.
     (<<<String>>>)
     
     * <<<VOTETIMESTAMP>>>: The ballot time stamp. (<<<Date>>>)
     
     * <<<VOTEZKPROOFSIG>>>: The voter Schnorr signature proof. (<<<byte[]>>>)
     
     * <<<VOTERCERTIFICATE>>>: The voter's certificate corresponding to the
     private key that was used to sign the vote. (<<<String>>>)
     
     * <<<VOTERAREA>>>: The voter area path related to the voter. (<<<String>>>)
     
     * <<<CONTESTID>>>: The contest of the ballot. (<<<String>>>)
     
     * <<<ELECTIONID>>>: The election of the ballot. (<<<String>>>)
     
     * <<<ELECTIONEVENTID>>>: The election event of the ballot. (<<<String>>>)
     
     * <<<VOTERID>>>: The SSN of the voter. (<<<String>>>)
     
     * <<<CHANNELID>>>: The channel through witch the vote is cast
     (<<<CHANNEL_ID_CONTROLLED>>>, <<<CHANNEL_ID_UNCONTROLLED>>>) (<<<String>>>)

** Cleansed File Directory

  The fourth input to the program is the name of the directory where the program
  can find the (unpacked) results from the cleansing service. These results are
  partial ballot boxes, i.e. comma-separated values (CSV) files, with the 
  following fields in the following order:

     * <<<ENCVOTEOPTIDS>>>: The compressed encrypted option identifiers.
     (<<<byte[]>>>)

     * <<<CONTESTID>>>: The contest of the ballot. (<<<String>>>)
     
     * <<<ELECTIONID>>>: The election of the ballot. (<<<String>>>)
     
     * <<<ELECTIONEVENTID>>>: The election event of the ballot. (<<<String>>>)

     * <<<CHANNELID>>>: The channel through witch the vote is cast
     (<<<CHANNEL_ID_CONTROLLED>>>, <<<CHANNEL_ID_UNCONTROLLED>>>) (<<<String>>>)

* Output

  The output of this program is a result file, listing all incidents that
  occurred during its execution. The following is an overview over the incidents
  the program can detect:
  
    * <<<CleansedVoteBrokenLineIncident>>>: The file with the cleansed votes
      contained a line that didn't conform to the format. The results
      file will show the first eighty characters of the line, commas being
      replaced by apostrophes.
  
    * <<<InjectedCleansedEncryptedVoteLineIncident>>>: The file with the
      cleansed votes contained a line that didn't match one of the encrypted
      votes from the VCS. The results file will show the cleansed vote's
      compressed encrypted option identifiers, contest ID, election ID and
      election event ID.
  
    * <<<VcsEncryptedVoteBrokenLineIncident>>>: The file with the VCS encrypted
      votes contained a line that didn't conform to the format. The results
      file will show the first eighty characters of the line, commas being
      replaced by apostrophes.
      
    * <<<VcsEncryptedVoteRetainedMoreThanOnceIncident>>>: The file with the
      cleansed votes contained more than one line that matched the same encrypted
      vote from the VCS. The results file will show the encrypted vote's UUID
      together with the number of matching cleansed votes.
    
    * <<<VcsEncryptedVotesMapKeyCollisionIncident>>>: The file with the 
      encrypted votes from the VCS contained two lines that resulted in
      the same key being used by the internal map. The results file will show
      both encrypted vote's UUID.
    
* Sample Files

  Two sample files containing VCS encrypted votes and cleansed votes are
  provided with this program. The following figure sketches the design of the
  sample files:

[images/NIZKP_Cleansing_Sample_File_Design.png] Design of the sample file for the
                                                NIZKP Cleansing program.
                                                
  The sample files are designed to illustrate the following cases:
  
    * <<<A>>>: The normal case, i.e. a pair consisting of an encrypted vote
      and a corresponding cleansed vote.
    
    * <<<B>>> and <<<B'>>>: A case where two voters in the same area have voted
      using the same voting options, and the ephemeral key of the ElGamal
      encryption was identical, such that the key used to match a VCS encrypted
      vote with a cleansed vote are identical. Generates a
      <<<VcsEncryptedVotesMapKeyCollisionIncident>>>, but is usually a sign on
      an error in the VCS.
    
    * <<<C>>>: Generates a <<<VcsEncryptedVoteRetainedMoreThanOnceIncident>>>.
    
    * <<<D>>> and <<<D'>>>: A case where two voters in the same area have voted
      using the same voting options, and where the cleansing service has
      retained both votes. Contrary to case <<<B>>> and <<<B'>>>, the ephemeral
      key of the ElGamal encryption will be different from time to time, hence
      there should normally no key collision.
    
    * <<<E>>> and <<<E'>>>: Generates a <<<InjectedCleansedEncryptedVoteLineIncident>>>.
      This test case is constructed such that the cleansed vote <<<E'>>> matches
      the encrypted vote <<<E>>>, except for the voter area being shifted to
      another area.
    
    * <<<F>>>: A case where the cleansing service has removed a vote from the VCS,
      e.g. because the voter has also voted on paper.
    
    * <<<G>>>: Generates a <<<InjectedCleansedEncryptedVoteLineIncident>>>.
    
    * <<<*>>>: Generates a <<<VcsEncryptedVoteBrokenLineIncident>>>.
    
    * <<<#>>>: Generates a <<<CleansedEncryptedVoteBrokenLineIncident>>>.
    
  Use the following command from the command-line in order to run the program
  against the two sample files, directing all output to a file called
  <<<Results.csv>>>:
  
----------------------------------------------------------------------------------------------------------------  
NizkpCleansing.sh NizkpCleansingFunctionalTestElGamalProperties.properties NizkpCleansingFunctionalTestAreas.csv NizkpCleansingFunctionalTestVcsEncryptedVotes.csv NizkpCleansingFunctionalTestCleansedFilesDirectory/ Results.csv
----------------------------------------------------------------------------------------------------------------

  The program should then output the following information to the console:
  
----------------------------------------------------------------------------------------------------
INFO: Results file NizkpCleansingResult.csv opened for writing.
INFO: Loading the encrypted votes from the VCS from NizkpCleansingFunctionalTestVcsEncryptedVotes.csv.
INFO: All 5 encrypted votes from the VCS loaded.
INFO: Loading the cleansed encrypted votes from NizkpCleansingFunctionalTestCleansedFilesDirectory/.
INFO: All 6 cleansed encrypted votes loaded.
INFO: Results file NizkpCleansingResult.csv closed for writing; wrote 6 events to it.
INFO: Done.
----------------------------------------------------------------------------------------------------

  The content of the file <<<Results.csv>>> should look like this:

----------------------------------------------------
VcsEncryptedVotesMapKeyCollisionIncident,8a80d79b3206038a0132163b996e005c,8a80d79b3206038a0132163b996e005d
VcsEncryptedVoteBrokenLineIncident,#
CleansedVoteBrokenLineIncident,*
InjectedCleansedVoteLineIncident,MTMxOTQ3Njc3NjczMTYyMzYxNzM4MTk0Mzg1NTQ3ODEzMjEzMDI5NTIzMTgyMjQyNjkwNzM0Nzg1MTU2NjQ1NzM1NTc5Nzg3ODMzMDUzMzc4MzE3NTQyMjI1ODgyNDk4NDUyNjQyMTQ0NjI3NTg1MTQ2Mjk5MDI5MzEyNTkxMzM0MzE0MjE3NDQyNTgzNzQwMTQ4MjEzOTQ0NTA3NDM4MDk2NjQ4MDg0MDAwODM3OTQ3ODU1MDEyNTkyNDk0MjA5OTcwMjI3MjI5ODIwNzkzMDg0NzM1NzAzMjU4MzExMDU1NTU5Nzk1MDI3NjQyNDE2NDkzNzA5MjMyNDk0OTA4NTMzMTQwMDc3NzQ0MTUyNzYyNTU2Mzk0MzczMDYyNDI2NDQ0MTU4ODYxNzg1MzI2NjY1NDI4MzY5MjkwMDE1OTgwODI3NzgwNjUwNjE2ODA3NTAzNjg2MzQwNDc1NDIyMjc3OTM2MTQwNjIwMzkwNjA0NjgyMjg5MDU2OTEyMzIzNzc3NDkyNTk4NjE2NzYyNzk1MjY2MDI5OTg3NzIzODI4NDEwODExODY1MDI4OTM4MzMxMzAxNzUzMjUwMDQ1NTExMDUyMTIwNTk1MDQyMTE1MDkzODA5OTM2NzMwODE1OTI3MzQ1MzQ3NzUzNTUwNzUzOTcxMTExODIyOTU2NzEwMTU1ODAwNjA2MzQwMTI1MjQ5NzE5MTgwMjIzNDg5ODQ0MzY2OTEzMDgwNDMwMTQ4OTUxNzc2OTkxOTAxNzA4NTQ2ODQxNzE2MjQ2OTc1ODgwMTY5MDM0MzAzOTczMDY0ODE4ODU1Njd8MjAwNTYwOTE0ODEzOTg2NjI3MzU5NDEzOTk0MTA3ODgzNzExNTg3MzA3NDEzMDg0NDY0NDA2NDEzODAwOTk4NzMyMjgwNzczNjAxMzUyNjE1MzgwNjg3Nzg0OTk2NDI1MjA1MjQ3NTE3OTE5OTgwOTk3OTc3MDc2MDg1MTk3MzM3MjQ5Nzc4NTkyNDUwNzE5MTQzNDkyMTE2Mjc4NjU3MTQ1NjQzMzUzOTg3NjEwODQ4NjIwMjc2MzkxNzcwNjY0ODYyOTk5NTQ2NDYyNTgyNDgwMDQ3MzM4OTcwMTA4NDE3NDc3NjY5ODA3ODcyMjQ5MzAxMzcyMjkxMDkwMzc1NDEwMjgxODUwNDk1NTAwMDc0NTQ3NDk0Njc0NDU3NTI1MjM3ODQ1NTMwNjY4MjgxNDA0NDY2MTY5NTgyNTAzNDU2NDgxNzk3ODcxMTQzNzY3NjE0MzE1ODg4MTAwMjk1MzcxMTYzODI1NDkyODM4NzkyNTQyODEwNzEwNzg1NTM2NDMyOTgwNzU2NDU1OTU0NTc2ODY5MjU0MDIwMzU0NzMxNTI4NzA4MTg0NjYyMDkzMjY0NDU2Njk5MzQ0MjA0MTczOTQ4Mzk1ODk3MzE1OTQzNjQyOTE4NTU4ODMzMTAyMDQ4ODExNDUyNjU4MDAwODc5Nzg0MDYwMTQzOTQ4NjA3MDk5NTczNzI2NjI4NzcyNDE3ODgxNjQzMTMzNzY4NjM1NjQwNjg5MzczMjQ1NTk2NTYyOTU4OTUwOTMyOTUwNjAzNDIzMjE5MzI4MjU2OTQzMDY1NTA4NjkyOTE1OTUzNzE1OTIzNjc=#,000004,01,999902
InjectedCleansedVoteLineIncident,Mjk3Mjk1NzMzMDkyMjAxNjg4MDA0MTg4Njk0MTk1ODM5MTcxOTg1MjA5OTEzMzU5OTg4MTU1NTEwMjY0ODkzNTU3NzM5NTg2MjU1OTAyMTY4ODg1NTQ1ODE5OTA1NjIxMDk0Njc1NTI1MDI0NzU2OTAwNDE2OTY3OTY3MzkxMjgxMDYyNzAxNTU5MDk3Nzc2MDIwMDU4MzY4Njk1NDM4NTE5NjgzOTc3ODIyNDg3NjQ0NTUyNzY5MzM0ODE2MzUxNDY2OTcyMTU2ODU2ODYwNzgyNzQ3MTQwNTA3ODk2NzI5ODc2MjgzNjY3NzE4NDQ3MzQxMjMxOTgxNjg2ODE4NDEyMzUzNzk4NDc3MTE5MDY2NDMyMDY1MzY5MTI0NTk2NjcwMTc3NjAxODUyMzE2Njc2NTE0OTMxMDE5MTgwMzk4MzE0NjM5OTQ2NzA5OTUyMzYwNjk0NTIwMzQzNjI2NTM1NzUyNjAyOTM0OTYxODc2NzkyNTQ5Njg5MjUxMDk1MjMwNDM2MzQ2ODAyMzczODM4MDA0NjY5NjU2NzY0OTg5MTg1NjM2MjE0MDc1NDg1MDgyMTY5NzI4ODMyNTI2NTcyMTU2MjEzMzExOTQwOTExMDc2ODIxMDUzNjIyODY5MTI4MTQ1NTIxNzgwNTQ4NjI2NDk1NzYwMDAwNDUwMTYyNDA4NDM2NTU0NDE5MzgzMzY0MTE2NjE1MTY4NTc4NTAxNDE5NjMyNjYyNDU4MDI2MTU0MTc0NTk4NTc5MTAwNjYyMzY4MTgwNTY2NDk0NjgzMTEwNTI2NzU0NTUwMjY5MDY5MjkzMTJ8MTU0NDI2NDAxMTA5NTEwMzA4NzM2NjI3MTI0MDcwMDY5NTAyNjc1OTg3MDQ4ODk4MTAzNjg2NTcxNDAyMTIyMDQ1NTE2NjIyODg0NDc1MDY1NDIzNzUxNjAzMjAwODgzMTU3MDY1MTc5ODc3ODg0NzcxMTA3NTU3NzM4MTkwOTgxNjQyNjI0MTA2NDIwNDA2NDUxMTY3NjgxNTc0ODA4MDY5ODcyNzE2NzQ4OTU1NzIzMTk1MjA4NzAzMzE4OTUyNDI2OTg0ODc3ODE4ODg2NDA1MjAxNDAwODMyOTI3MDY5OTA5NTExNjk2OTcyMzUyMzg5NjQ3MjMzMTI1MTkzNzk4NjQ4MzA0MTE5MDQzMjMyNjAzNDU1NTkxNzczMTk2MTc0NjcxMjkzODY2MzI2MTQxMDg2OTc2MDI4OTc3MzY1MjI5MTMzNDExNTQ0MTExMjY0MzkzNjMzMzQ4MDY5NDMyODA3MTE1NDcyNTUwMjIyNTU0MDQzMTczNDkyNzkwMDg0Nzg4MjQzNTk2ODY2NTk0NDMyMTIzODA1NjU2MjYzMTQ3NTQ1NjAyMDQ0ODcwNDU4ODU0Mjg5MDg2MTQwMjIxNTEyMDg0ODUyOTQ0Nzc5MTg1MDIwNzA0OTU2NTg2OTgwMTA5OTA4MzM4MjAzNDQ5NTQwOTQ1NjAyNjAwNTk5OTkwNDkxODEzOTE2MjM0NzcyNjQ3MTUzNDgwNTIwMTU4MTcwNjU5NDgwMzk3NzMzNjE3NDQ5NTUwMzg5MjgxMjg2NDA3NTM4NDE4NDkxNjYzNTE3NTI4MTA5MDEwOTc4NzY3ODg4NjE=#,001102,02,666601
VcsEncryptedVoteRetainedMoreThanOnceIncident,8a80d79c32060388013215ba9f200039,2
----------------------------------------------------
    